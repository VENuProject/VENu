<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qualcomm.Vuforia.UnityExtensions</name>
    </assembly>
    <members>
        <member name="T:Vuforia.EyewearComponentFactory">
            <summary>
            Singleton implementation for a factory class used to generate MonoBehaviours whole implementation type is unknown.
            If no external IEyewearComponentFactory implementation is registered, an internal null implementation is used
            </summary>
        </member>
        <member name="T:Vuforia.IEyewearComponentFactory">
            <summary>
            This interface is used to allow the generation of MonoBehaviours that implement the
            abstract base behaviour classes from scripts that do not know about them.
            The interface is implemented in a not precompiled class and registers itself at EyewearComponentFactory.Instance
            </summary>
        </member>
        <member name="T:Vuforia.FactorySetter">
            <summary>
            Attribute used to mark up a function that initialized a factory.
            Used from ComponentFactoryStarterBehaviour.
            </summary>
        </member>
        <member name="T:Vuforia.IEditorQCARBehaviour">
            <summary>
            The editor interface for the QCARBehaviour.
            Supposed to be used from Vuforia authoring scripts only.
            </summary>
        </member>
        <member name="T:Vuforia.InternalEyewearCalibrationProfileManager">
            <summary>
            Class that provides functionality specific to AR on Eyewear devices.
            </summary>
            <remarks>
            The EyewearCalibrationProfileManager allows the user to list the number of calibration
            profiles available on the device and select the active profile to use.
            </remarks>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount">
            <returns>
            Return the number of profile slots provided.
            </returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.getUsedCount">
            <returns>
            Return the number of user calibration profiles stored.
            </returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.isProfileUsed(System.Int32)">
            <param name="profileID">the calibration profile to use, a default of the current active profile is set.</param>
            <returns>Returns true if the specified profile slot contains data.</returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.getActiveProfile">
            <summary>
            Get the ID of the active user calibration profile.
            </summary>
            <returns>Return a number between 0 and <see cref="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount"/>.</returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.setActiveProfile(System.Int32)">
            <summary>
            Set a calibration profile as active.
            </summary>
            <param name="profileID">A number between 1 and <see cref="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount"/>.</param>
            <returns>Return true if the active profile is changed, false otherwise (e.g. if the specified profile is not valid)</returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.getProjectionMatrix(System.Int32,Vuforia.InternalEyewear.EyeID)">
            <summary>
            Get the projection matrix for the specified profile and eye.
            </summary>
            <param name="profileID">A number between 1 and <see cref="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount"/>.</param>
            <param name="eyeID">the Eye to retrieve the projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
            <returns>Return the stored projection matrix, will contain all 0's if no data is stored for the profile.</returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.setProjectionMatrix(System.Int32,Vuforia.InternalEyewear.EyeID,UnityEngine.Matrix4x4)">
            <summary>
            Store a projection matrix to a calibration profile
            </summary>
            <param name="profileID">A number between 1 and <see cref="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount"/>.</param>
            <param name="eyeID">the Eye to retrieve the projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
            <param name="projectionMatrix">The projection matrix to store</param>
            <returns>Return true if the new projection matrix was stored successfully, false otherwise.</returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.getProfileName(System.Int32)">
            <summary>
            Get the display name associated with a profile
            </summary>
            <param name="profileID">A number between 1 and <see cref="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount"/>.</param>
            <returns>Return a unicode string, if no display name has been provided for the specified profile an empty string will be returned.</returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.setProfileName(System.Int32,System.String)">
            <summary>
            Set a display name associated with a profile.
            </summary>
            <param name="profileID">A number between 1 and <see cref="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount"/>.</param>
            <param name="name">A unicode string to use as the display name</param>
            <returns>Returns true if the display name was successfully set, false otherwise.</returns>
        </member>
        <member name="M:Vuforia.InternalEyewearCalibrationProfileManager.clearProfile(System.Int32)">
            <summary>
            Delete all stored data for the specified profile.
            </summary>
            <param name="profileID">A number between 1 and <see cref="M:Vuforia.InternalEyewearCalibrationProfileManager.getMaxCount"/>.</param>
            <returns>Returns true if the profile was successfully cleared, false otherwise.</returns>
        </member>
        <member name="T:Vuforia.BackgroundPlaneAbstractBehaviour">
            <summary>
            This Behaviour renders the video background from the camera in Unity.
            </summary>
        </member>
        <member name="T:Vuforia.IVideoBackgroundEventHandler">
            <summary>
            Interface for handling events regarding the video background
            </summary>
        </member>
        <member name="M:Vuforia.IVideoBackgroundEventHandler.OnVideoBackgroundConfigChanged">
            <summary>
            Called after the video background config has been changed
            </summary>
        </member>
        <member name="M:Vuforia.BackgroundPlaneAbstractBehaviour.SetEditorValues(System.Int32)">
            <summary>
            This method is used to set the values of unity editor fields.
            </summary>
        </member>
        <member name="M:Vuforia.BackgroundPlaneAbstractBehaviour.CheckNumDivisions">
            <summary>
            This method is used to check if the value of NumDivisions is acceptable
            </summary>
        </member>
        <member name="M:Vuforia.BackgroundPlaneAbstractBehaviour.OnVideoBackgroundConfigChanged">
            <summary>
            reset the video background
            </summary>
        </member>
        <member name="P:Vuforia.BackgroundPlaneAbstractBehaviour.NumDivisions">
            <summary>
            This property is used for configuring the size of video background mesh.
            </summary>
        </member>
        <member name="P:Vuforia.BackgroundPlaneAbstractBehaviour.DefaultRotationTowardsCamera">
            <summary>
            The default rotation that is applied to the Background Plane to align it towards the camera, before applying any
            orientation or mirroring rotations on top of that.
            </summary>
        </member>
        <member name="T:Vuforia.IEditorTrackableBehaviour">
            <summary>
            The editor interface for TrackableBehaviours
            to be implemented explicitly by behaviours
            </summary>
        </member>
        <member name="T:Vuforia.IOSCamRecoveringHelper">
            <summary>
            Helper class used to work around an issue on iOS8 where the camera fails to 
            Start after pausing and resuming the app.
            </summary>
        </member>
        <member name="M:Vuforia.IOSCamRecoveringHelper.SetHasJustResumed">
            <summary>
            Calling this after attempting to start the camera when resuming from a pause
            will make sure the recovering logic is executed in the following updates
            </summary>
        </member>
        <member name="M:Vuforia.IOSCamRecoveringHelper.TryToRecover">
            <summary>
            This is called from QCARAbstractBehaviour.Update if there was no QCAR state
            </summary>
        </member>
        <member name="M:Vuforia.IOSCamRecoveringHelper.SetSuccessfullyRecovered">
            <summary>
            Called once a new QCAR frame was processed to reset the logic.
            </summary>
        </member>
        <member name="T:Vuforia.UnityCameraExtensions">
            <summary>
            Extension methods for the Unity Camera class.
            This works around an API change in Unity 5 where Camera.pixelHeight returns an int instead of a float.
            Because the Unity extension is shipped as a precompiled library, we can only link against either the float version or 
            the int version. To work with both Unity 4.6 and 5.0, we use these extension methods instead.
            </summary>
        </member>
        <member name="T:Vuforia.ObjectTarget">
            <summary>
            A trackable that represents a ObjectTarget object
            </summary>
        </member>
        <member name="T:Vuforia.ExtendedTrackable">
            <summary>
            The base class for all trackable types that support extended tracking.
            </summary>
        </member>
        <member name="T:Vuforia.Trackable">
            <summary>
            The base class behaviour for all trackable types in Vuforia.
            </summary>
        </member>
        <member name="P:Vuforia.Trackable.Name">
            <summary>
            The name of the Trackable
            </summary>
        </member>
        <member name="P:Vuforia.Trackable.ID">
            <summary>
            The runtime Id of the Trackable
            </summary>
        </member>
        <member name="M:Vuforia.ExtendedTrackable.StartExtendedTracking">
            <summary>
            Start extended tracking. The Target can be tracked although it is not visible.
            </summary>
        </member>
        <member name="M:Vuforia.ExtendedTrackable.StopExtendedTracking">
            <summary>
            Stop extended tracking. Target will only be tracked when it is visible.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTarget.GetSize">
            <summary>
            Returns the size  of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTarget.SetSize(UnityEngine.Vector3)">
            <summary>
            Sets the size of the target (in 3D scene units).
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="T:Vuforia.ObjectTargetAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for a ObjectTarget in the editor
            as well as a tracked ObjectTarget result at runtime
            </summary>
        </member>
        <member name="T:Vuforia.DataSetTrackableBehaviour">
            <summary>
            This is the base class for all trackables that are part of a dataset
            </summary>
        </member>
        <member name="T:Vuforia.TrackableBehaviour">
            <summary>
            The base class for all TrackableBehaviours in Vuforia
            This class serves both as an augmentation definition for a Trackable in the editor
            as well as a tracked Trackable result at runtime
            </summary>
        </member>
        <member name="M:Vuforia.TrackableBehaviour.RegisterTrackableEventHandler(Vuforia.ITrackableEventHandler)">
            <summary>
            This method registers a new Tracker event handler at the Tracker.
            These handlers are called as soon as ALL Trackables have been updated
            in this frame.
            </summary>
        </member>
        <member name="M:Vuforia.TrackableBehaviour.UnregisterTrackableEventHandler(Vuforia.ITrackableEventHandler)">
            <summary>
            This method unregisters a Tracker event handler.
            Returns "false" if event handler does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.TrackableBehaviour.OnTrackerUpdate(Vuforia.TrackableBehaviour.Status)">
            <summary>
            Is triggered by the TrackerBehavior after it has updated.
            </summary>
        </member>
        <member name="M:Vuforia.TrackableBehaviour.OnFrameIndexUpdate(System.Int32)">
            <summary>
            Is triggered by the StateManager after each render frame
            </summary>
            <param name="newFrameIndex">Frame index of processed frame, multiple render frames can have the same frame index</param>
        </member>
        <member name="M:Vuforia.TrackableBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="M:Vuforia.TrackableBehaviour.Vuforia#IEditorTrackableBehaviour#UnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="P:Vuforia.TrackableBehaviour.CurrentStatus">
            <summary>
            The tracking status of the TrackableBehaviour
            </summary>
        </member>
        <member name="P:Vuforia.TrackableBehaviour.Trackable">
            <summary>
            The Trackable created at runtime that is augmented by this TrackableBehaviour
            </summary>
        </member>
        <member name="P:Vuforia.TrackableBehaviour.TrackableName">
            <summary>
            The name of the Trackable.
            </summary>
        </member>
        <member name="T:Vuforia.TrackableBehaviour.Status">
            <summary>
            The tracking status of the TrackableBehaviour.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TrackableBehaviour.Status.UNDEFINED" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TrackableBehaviour.Status.DETECTED" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TrackableBehaviour.Status.TRACKED" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TrackableBehaviour.Status.EXTENDED_TRACKED" -->
        <member name="T:Vuforia.WorldCenterTrackableBehaviour">
            <summary>
            This interface represents a TrackableBehaviour that can be set as the world center trackable
            </summary>
        </member>
        <member name="P:Vuforia.WorldCenterTrackableBehaviour.Trackable">
            <summary>
            The Trackable created at runtime that is augmented by this TrackableBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.SetAsSmartTerrainInitializationTarget">
            <summary>
            This methods sets the current target as the initialization target on the SmartTerrainTracker
            using the configuration set in the inspector. 
            Otherwise please use the SmartTerrainTracker.SetInitializationTarget API.
            This method will be automatically called on detection of this target, but only if the SmartTerrainTracker
            a) has not been started yet
            b) has been reset (and not restarted)
            To implement a different behaviour, this method can be used e.g. from a TrackableEventHandler.
            E.g. if a different initializaiton target is detected while Smart Terrain is active, the tracker could be
            stopped and reset, and then this method called to reinitialize Smart Terrain from the new target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SetDataSetPath(System.String)">
            <summary>
            sets the DataSetPath (only in editor mode)
            </summary>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SetExtendedTracking(System.Boolean)">
            <summary>
            Defines whether extended tracking should be enabled for this target
            </summary>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SetReconstructionToInitialize(Vuforia.ReconstructionFromTargetAbstractBehaviour)">
            <summary>
            Defines whether this target should initilize smart terrain (and which) when detected.
            Set null to not initialize any smart terrain.
            </summary>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SetSmartTerrainOccluderBoundsMin(UnityEngine.Vector3)">
            <summary>
            sets the minimum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SetSmartTerrainOccluderBoundsMax(UnityEngine.Vector3)">
            <summary>
            sets the maximum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SetSmartTerrainOccluderOffset(UnityEngine.Vector3)">
            <summary>
            sets the minimum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="M:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SetSmartTerrainOccluderRotation(UnityEngine.Quaternion)">
            <summary>
            sets the maximum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#DataSetName">
            <summary>
            The name of the data set the Trackable belongs to.
            Please be aware that the data set name is not a unique identifier at runtime!
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#DataSetPath">
            <summary>
            The path to the data set in the file system.
            Please be aware that the data set name is not a unique identifier at runtime!
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#ExtendedTracking">
            <summary>
            Returns wether extended tracking is enabled for this target
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#ReconstructionToInitialize">
            <summary>
            Returns which SmartTerrainBehaviour this target will initialize. Returns null if this is not an initialization target.
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SmartTerrainOccluderBoundsMin">
            <summary>
            the minimum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SmartTerrainOccluderBoundsMax">
            <summary>
            the minimum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SmartTerrainOccluderOffset">
            <summary>
            the minimum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.Vuforia#IEditorDataSetTrackableBehaviour#SmartTerrainOccluderRotation">
            <summary>
            the minimum bounds of the occluder box for ST initialization
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.OnDrawGizmos">
            <summary>
            Draw Gizmos for this object target (Editor Mode).
            The gizmo is a visual guide for aligning virtual content with this object target
            represented by a bounding box, grid of the capture area and the origin alignment plane.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.CorrectScaleImpl">
            <summary>
            Scales the Trackable uniformly
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.SetBoundingBox(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set the Bounding Box (only in editor mode).
            </summary>
            <param name="minBBox">bounding box min position</param>
            <param name="maxBBox">bounding box max position</param>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.GetSize">
            <summary>
            Returns the size of this target in scene units
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.SetLength(System.Single)">
            <summary>
            Set the length (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
            <param name="length">length value</param>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.SetWidth(System.Single)">
            <summary>
            Set the width (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
            <param name="width">width value</param>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.SetHeight(System.Single)">
            <summary>
            Set the height (z-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
            <param name="height">height value</param>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.Vuforia#IEditorObjectTargetBehaviour#SetAspectRatio(System.Single,System.Single)">
            <summary>
            Set the  Aspect Ratio (only in editor mode).
            </summary>
            <param name="aspectRatioXY">aspect ratio length/width</param>
            <param name="aspectRatioXZ">aspect ratio length/height</param>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.Vuforia#IEditorObjectTargetBehaviour#InitializeObjectTarget(Vuforia.ObjectTarget)">
            <summary>
            Initialize the object target
            </summary>
            <param name="objectTarget">Object Target</param>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.Vuforia#IEditorObjectTargetBehaviour#SetShowBoundingBox(System.Boolean)">
            <summary>
            Active the visualization of the bounding box/alignment guide
            </summary>
            <param name="showBoundingBox">If true the bounding box will be displayed</param>
        </member>
        <member name="M:Vuforia.ObjectTargetAbstractBehaviour.Vuforia#IEditorObjectTargetBehaviour#SetPreviewImage(UnityEngine.Texture2D)">
            <summary>
            Set the preview image in the inspector
            </summary>
            <param name="previewImage">Texture2D used as image</param>
        </member>
        <member name="P:Vuforia.ObjectTargetAbstractBehaviour.ObjectTarget">
            <summary>
            The ObjectTarget that this ObjectTargetBehaviour augments
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice">
            <summary>
            This class provides access to camera methods and properties
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.Init(Vuforia.CameraDevice.CameraDirection)">
            <summary>
            Initializes the camera.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.Deinit">
            <summary>
            Deinitializes the camera.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.Start">
            <summary>
            Starts the camera. Frames are being delivered.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.Stop">
            <summary>
            Stops the camera if video feed is not required
            (e.g. in non-AR mode of an application).
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetVideoMode">
            <summary>
             Get the video mode data that matches the selected CameraDeviceMode.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetVideoMode(Vuforia.CameraDevice.CameraDeviceMode)">
            <summary>
             Get the video mode data that matches the given CameraDeviceMode.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SelectVideoMode(Vuforia.CameraDevice.CameraDeviceMode)">
            <summary>
            Chooses a video mode out of the list of modes.
            This function can be only called after the camera device has been
            initialized but not started yet. Once you have started the camera and
            you need the select another video mode, you need to Stop(), Deinit(),
            then Init() the camera before calling SelectVideoMode() again.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetSelectedVideoMode(Vuforia.CameraDevice.CameraDeviceMode@)">
            <summary>
            Can be used to query a previously set camera device mode.
            Will return false if the mode has not been set yet.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetFlashTorchMode(System.Boolean)">
            <summary>
            Activate or deactivate the camera device flash.
            Returns false if flash is not available or can't be activated.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetFocusMode(Vuforia.CameraDevice.FocusMode)">
            <summary>
            Set the active focus mode.
            Returns false if this mode is not available or can't be activated.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetFrameFormat(Vuforia.Image.PIXEL_FORMAT,System.Boolean)">
            <summary>
             Enables or disables the request of the camera image in the desired pixel
            format. Returns true on success, false otherwise. Note that this may
            result in processing overhead. Image are accessed using GetCameraImage.
            Note that there may be a delay of several frames until the camera image
            becomes availables.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetCameraImage(Vuforia.Image.PIXEL_FORMAT)">
            <summary>
            Returns a camera images for the requested format. Returns null if
            this image is not available. You must call SetFrameFormat before
            accessing the corresponding camera image.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetCameraDirection">
            <summary>
            Get the active camera direction.
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.Instance">
            <summary>
            Returns an instance of a CameraDevice (thread safe)
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice.CameraDeviceMode">
            <summary>
            The mode used for camera capturing and video rendering.
            The camera device mode is set through the Unity inspector.
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice.FocusMode">
            <summary>
            The different focus modes for the active camera
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice.CameraDirection">
            <summary>
            If the front, back or default camera on a device should be used
            Not all devices have both a back and a front camera.
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice.VideoModeData">
            <summary>
            This struct stores video mode data. This includes the width and height of
            the frame and the framerate of the camera.
            </summary>
        </member>
        <member name="T:Vuforia.CloudRecoAbstractBehaviour">
            <summary>
            This is the main behaviour class that encapsulates cloud recognition behaviour.
            It just has to be added to a Vuforia-enabled Unity scene and will initialize the target finder and wait for new results.
            State changes and new results will be sent to registered ICloudRecoEventHandlers
            </summary> 
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.Initialize">
            <summary>
            Initializes the TargetFinder
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.CheckInitialization">
            <summary>
            Checks the initialization state of the TargetFinder.
            If the initialization was successful, the recognition can be started.
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.StartCloudReco">
            <summary>
            Starts cloud recognition and notifies event handlers
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.StopCloudReco">
            <summary>
            Stops cloud recognition and notifies event handlers
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.RegisterEventHandler(Vuforia.ICloudRecoEventHandler)">
            <summary>
            Registers an event handler with this CloudRecoBehaviour which will be called on events
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.UnregisterEventHandler(Vuforia.ICloudRecoEventHandler)">
            <summary>
            Unregisters an event handler
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.OnEnable">
            <summary>
            If we have been initialized before, we will initialize the TargetFinder again here when enabled
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.OnDisable">
            <summary>
            If this component is disabled, the targetfinder is deinitialized
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.Start">
            <summary>
            Register for the OnInitialized event at the QCARBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.Update">
            <summary>
            Update the TargetFinder each frame
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.OnDestroy">
            <summary>
            When this game object is destroyed, the target finder gets deinitialized and the class unregisters itself as event handler
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoAbstractBehaviour.OnQCARStarted">
            <summary>
            Initialize after QCAR has been started correctly
            </summary>
        </member>
        <member name="P:Vuforia.CloudRecoAbstractBehaviour.CloudRecoEnabled">
            <summary>
            If cloud has been enabled in the menu
            </summary>
        </member>
        <member name="P:Vuforia.CloudRecoAbstractBehaviour.CloudRecoInitialized">
            <summary>
            If cloud reco has been initialized yet
            </summary>
        </member>
        <member name="T:Vuforia.ReconstructionImpl">
            <summary>
            This is the base interface for a smart terrain reconstruction.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.SetMaximumArea(UnityEngine.Rect)">
            <summary>
            Set the maximum area of the reconstruction in scene units. 
            The ground plane will not expand outside of this rectangle.
            Props are only created inside the rectangle. Props on the boundary
            of the rectangle will be cut off.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.GetMaximumArea(UnityEngine.Rect@)">
            <summary>
            Get the maximum extent of the smart terrain reconstruction in scene units.
            Returns false if no maximum area has been defined.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.Stop">
            <summary>
            Stop mesh this reconstruction, but continue tracking.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.Start">
            <summary>
            Start the reconstruction if previously stopped, i.e. new surfaces and props will be created and existing ones will be refined.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.IsReconstructing">
            <summary>
            Returns true if the surface and props are being updated.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.SetNavMeshPadding(System.Single)">
            <summary>
            Define how much a surface mesh is diminished for the NavMesh representation.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.StartNavMeshUpdates">
            <summary>
            Start creating a nav mesh representation on surfaces.
            By default, nav mesh updates are disabled.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.StopNavMeshUpdates">
            <summary>
            Stop updating nav meshes, but continue updating the surface and props and keep tracking.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.IsNavMeshUpdating">
            <summary>
            Returns true if the nav mesh is being updated.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionImpl.Reset">
            <summary>
            Delete the created meshes for surfaces and props.
            The tracker needs to be stopped before calling this function
            </summary>
        </member>
        <member name="P:Vuforia.ReconstructionImpl.NavMeshPadding">
            <summary>
            Returns the Nav mesh padding previously set by SetNavMeshPadding. Defaults to 0.
            </summary>
        </member>
        <member name="T:Vuforia.HideExcessAreaAbstractBehaviour">
            <summary>
            This Behaviour creates four planes (mattes) at the near clipping plane of camera frustum 
            to hide the augmentation going off the limit of video background due to scaling
            </summary>
        </member>
        <member name="F:Vuforia.HideExcessAreaAbstractBehaviour.matteShader">
            <summary>
            This is the shader used for matte planes
            </summary>
        </member>
        <member name="F:Vuforia.HideExcessAreaAbstractBehaviour.disableMattes">
            <summary>
            This property is used to enable or disable mattes in the scene
            </summary>
        </member>
        <member name="M:Vuforia.HideExcessAreaAbstractBehaviour.CreateQuad(UnityEngine.GameObject,System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Int32)">
            <summary>
            This function is used to create a named plane for a given parent with specified transformation and layer id
            </summary>
        </member>
        <member name="M:Vuforia.HideExcessAreaAbstractBehaviour.SetPlanesActive(System.Boolean)">
            <summary>
            This function is used to enable or disable planes
            </summary>
        </member>
        <member name="T:Vuforia.ObjectTargetImpl">
            <summary>
            A trackable that represents an ObjectTarget object
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetImpl.GetSize">
            <summary>
            Returns the size  of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTargetImpl.SetSize(UnityEngine.Vector3)">
            <summary>
            Sets the size of the target (in 3D scene units).
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="T:Vuforia.UnityPlayer">
            <summary>
            This class serves as a singleton facade to the platform dependent Unity Player.
            The UnityPlayer implementation is set from the QCARBehaviour Awake method.
            </summary>
        </member>
        <member name="M:Vuforia.UnityPlayer.SetImplementation(Vuforia.IUnityPlayer)">
            <summary>
            Forces the singleton to a specific interface implementation
            Called from QCARBehaviour.Awake.
            </summary>
        </member>
        <member name="T:Vuforia.NullUnityPlayer">
            <summary>
            This class encapsulates functionality to handle various life cycle events
            (initializing QCAR, pause events, surface changed events)
            </summary>
        </member>
        <member name="T:Vuforia.IUnityPlayer">
            <summary>
            This class encapsulates functionality to detect various surface events
            (size, orientation changed) and delegate this to native.
            These are used by Unity Extension code and should usually not be called by app code.
            </summary>
        </member>
        <member name="M:Vuforia.IUnityPlayer.LoadNativeLibraries">
            <summary>
            Loads native plugin libraries on platforms where this is explicitly required.
            </summary>
        </member>
        <member name="M:Vuforia.IUnityPlayer.InitializePlatform">
            <summary>
            Initialized platform specific settings
            </summary>
        </member>
        <member name="M:Vuforia.IUnityPlayer.Start(System.String)">
            <summary>
            Initializes QCAR; called from Start
            </summary>
        </member>
        <member name="M:Vuforia.IUnityPlayer.Update">
            <summary>
            Called from Update, checks for various life cycle events that need to be forwarded
            to QCAR, e.g. orientation changes
            </summary>
        </member>
        <member name="M:Vuforia.IUnityPlayer.OnPause">
            <summary>
            Pauses QCAR
            </summary>
        </member>
        <member name="M:Vuforia.IUnityPlayer.OnResume">
            <summary>
            Resumes QCAR
            </summary>
        </member>
        <member name="M:Vuforia.IUnityPlayer.OnDestroy">
            <summary>
            Deinitializes QCAR
            </summary>
        </member>
        <member name="T:Vuforia.PlayModeUnityPlayer">
            <summary>
            This class encapsulates functionality to detect various surface events
            (size, orientation changed) and delegate this to native.
            These are used by Unity Extension code and should usually not be called by app code.
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeUnityPlayer.LoadNativeLibraries">
            <summary>
            Loads native plugin libraries on platforms where this is explicitly required.
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeUnityPlayer.InitializePlatform">
            <summary>
            Initialized platform specific settings
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeUnityPlayer.Start(System.String)">
            <summary>
            Initializes QCAR; called from Start
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeUnityPlayer.Update">
            <summary>
            Called from Update, checks for various life cycle events that need to be forwarded
            to QCAR, e.g. orientation changes
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeUnityPlayer.OnPause">
            <summary>
            Pauses QCAR
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeUnityPlayer.OnResume">
            <summary>
            Resumes QCAR
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeUnityPlayer.OnDestroy">
            <summary>
            Deinitializes QCAR
            </summary>
        </member>
        <member name="T:Vuforia.ReconstructionFromTargetImpl">
            <summary>
            This class represents a smart terrain reconstruction that is initialized with a target
            </summary>
        </member>
        <member name="T:Vuforia.ReconstructionFromTarget">
            <summary>
            This is the interface for a smart terrain reconstruction that is initialized from a known target
            </summary>
        </member>
        <member name="T:Vuforia.Reconstruction">
            <summary>
            This is the base interface for a smart terrain reconstruction.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.SetMaximumArea(UnityEngine.Rect)">
            <summary>
            Set the maximum area of the reconstruction in scene units. 
            The ground plane will not expand outside of this rectangle.
            Props are only created inside the rectangle. Props on the boundary
            of the rectangle will be cut off.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.GetMaximumArea(UnityEngine.Rect@)">
            <summary>
            Get the maximum extent of the smart terrain reconstruction in scene units.
            Returns false if no maximum area has been defined.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.Stop">
            <summary>
            Stop mesh this reconstruction, but continue tracking.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.Start">
            <summary>
            Start the reconstruction if previously stopped, i.e. new surfaces and props will be created and existing ones will be refined.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.IsReconstructing">
            <summary>
            Returns true if the surface and props are being updated.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.SetNavMeshPadding(System.Single)">
            <summary>
            Define how much a surface mesh is diminished for the NavMesh representation.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.StartNavMeshUpdates">
            <summary>
            Start creating a nav mesh representation on surfaces.
            By default, nav mesh updates are disabled.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.StopNavMeshUpdates">
            <summary>
            Stop updating nav meshes, but continue updating the surface and props and keep tracking.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.IsNavMeshUpdating">
            <summary>
            Returns true if the nav mesh is being updated.
            </summary>
        </member>
        <member name="M:Vuforia.Reconstruction.Reset">
            <summary>
            Delete the created meshes for surfaces and props.
            The tracker needs to be stopped before calling this function
            </summary>
        </member>
        <member name="P:Vuforia.Reconstruction.NavMeshPadding">
            <summary>
            Returns the Nav mesh padding previously set by SetNavMeshPadding. Defaults to 0.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.SetInitializationTarget(Vuforia.CylinderTarget,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set the Trackable that is used to initialize the Reconstruction.
            Use occluderMin and occluderMax to specify an occluder box that will serve as a mask for plane finding.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.SetInitializationTarget(Vuforia.CylinderTarget,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Set the Trackable that is used to initialize the Reconstruction.
            Use occluderMin and occluderMax to specify an occluder box that will serve as a mask for plane finding.
            offsetToOccluderOrigin and rotationToOccluderOrigin define a translational offset and rotation of the occluder volume to the initialization target. 
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.SetInitializationTarget(Vuforia.ImageTarget,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set the Trackable that is used to initialize the Reconstruction.
            Use occluderMin and occluderMax to specify an occluder box that will serve as a mask for plane finding.
            scaleToMillimenters is a scale factor that defines how the initialization target/occluder dimensions need to be scaled to be in real world millimeters.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.SetInitializationTarget(Vuforia.ImageTarget,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Set the Trackable that is used to initialize the Reconstruction.
            Use occluderMin and occluderMax to specify an occluder box that will serve as a mask for plane finding.
            offsetToOccluderOrigin and rotationToOccluderOrigin define a translational offset and rotation of the occluder volume to the initialization target.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.SetInitializationTarget(Vuforia.MultiTarget,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set the Trackable that is used to initialize the Reconstruction.
            Use occluderMin and occluderMax to specify an occluder box that will serve as a mask for smart terrain plane finding.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.SetInitializationTarget(Vuforia.MultiTarget,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Set the Trackable that is used to initialize Smart Terrain.
            Use occluderMin and occluderMax to specify an occluder box that will serve as a mask for plane finding.
            offsetToOccluderOrigin and rotationToOccluderOrigin define a translational offset and rotation of the occluder volume to the initialization target.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.GetInitializationTarget(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns the trackable used for initialization plus additional initialization data.
            Returns null if no initialization target has been defined.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTarget.GetInitializationTarget(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
            <summary>
            Returns the trackable used for initialization plus additional initialization data, including the occluder offset if defined
            Returns null if no initialization target has been defined.
            </summary>
        </member>
        <member name="P:Vuforia.ReconstructionFromTargetImpl.CanAutoSetInitializationTarget">
            <summary>
            Returns true if the the tracker hasn't started yet or has been reset.
            Will return false if the reconstruction has been added to the builder, but not reset - in this case a detected initialization target should not 
            automatically set itself as the new initialization target.
            </summary>
        </member>
        <member name="T:Vuforia.ReconstructionFromTargetAbstractBehaviour">
            <summary>
            This Monobehaviour supplements the ReconstructionAbstractBehaviour with target initialization specific functionality
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionFromTargetAbstractBehaviour.Initialize">
            <summary>
            This will initialize the reconstruction and add it to the builder if configured.
            </summary>
        </member>
        <member name="P:Vuforia.ReconstructionFromTargetAbstractBehaviour.ReconstructionBehaviour">
            <summary>
            Reference to the ReconstructionAbstractBehaviour that this ReconstructionFromTargetBehaviour initializes.
            </summary>
        </member>
        <member name="P:Vuforia.ReconstructionFromTargetAbstractBehaviour.ReconstructionFromTarget">
            <summary>
            Returns a ReconstructionFromTarget object that can be configured to be initialized with a specific target
            </summary>
        </member>
        <member name="T:Vuforia.SmartTerrainBuilder">
            <summary>
            The SmartTerrainBuilder controls the smart terrain generation and tracking sub-system of Vuforia.
            It generates props and surfaces for added reconstructions.
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilder.Init">
            <summary>
            Initializes the SmartTerrainBuilder.
            This is automatically called from the SmartTerrainTrackerBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilder.Deinit">
            <summary>
            Deinitializes the SmartTerrainBuilder.
            This is automatically called from the SmartTerrainTrackerBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilder.GetReconstructions">
            <summary>
            Returns previously added Reconstructions
            Automatically called from the ReconstructionFromTarget or ReconstructionFromEnvironment Behaviours
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilder.CreateReconstruction``1">
            <summary>
            Factory method to create reconstruction objects
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilder.AddReconstruction(Vuforia.ReconstructionAbstractBehaviour)">
            <summary>
            Adds a reconstruction to the builder. This will start the reconstruction.
            If the Reconstruction has "Automatic start" selected in the inspector, this will be called automatically.
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilder.RemoveReconstruction(Vuforia.ReconstructionAbstractBehaviour)">
            <summary>
            Removes a previously added reconstruction to the builder. This will stop the reconstruction.
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilder.DestroyReconstruction(Vuforia.Reconstruction)">
            <summary>
            Cleans up a previously created reconstruction object
            Automatically called from the ReconstructionFromTarget or ReconstructionFromEnvironment Behaviours
            </summary>
        </member>
        <member name="T:Vuforia.InternalEyewear">
            <summary>
            Class that provides functionality specific to AR on Eyewear devices.
            </summary>
            <remarks>
            <br/><b>This API is only supported in the %Vuforia SDK for Digital %Eyewear.</b><br/><br/>
            
            Digital Eyewear integration provides methods to detect and control an 
            Eyewear device and to retrieve calibration data needed to correctly
            register augmentations with the real world.
            </remarks>
        </member>
        <member name="M:Vuforia.InternalEyewear.IsSupportedDeviceDetected">
            <summary>
            Returns true if supported Eyewear hardware is detected, false otherwise.
            </summary>
            <remarks>
            A call should be made to this method before calling other methods in this class.
            </remarks>
        </member>
        <member name="M:Vuforia.InternalEyewear.IsSeeThru">
            <summary>
            Returns true if the Eyewear device detected has a see-through display.
            </summary>
        </member>
        <member name="M:Vuforia.InternalEyewear.GetScreenOrientation">
            <summary>
            Returns the correct screen orientation to use when rendering for the eyewear device.
            </summary>
        </member>
        <member name="M:Vuforia.InternalEyewear.IsStereoCapable">
            <summary>
            Returns true if the Eyewear device has a stereo display, false otherwise.
            </summary>
        </member>
        <member name="M:Vuforia.InternalEyewear.IsStereoEnabled">
            <summary>
            Returns true if the Eyewear device is in stereo mode
            </summary>
        </member>
        <member name="M:Vuforia.InternalEyewear.IsStereoGLOnly">
            <summary>
            Returns true if the Eyewear device stereo mode is only for OpenGL content.
            </summary>
            <remarks>
            Some Eyewear devices don't support stereo for 2D (typically Android widget)
            content. On these devices 2D content is rendered to each eye automatically
            without the need for the app to create a split screen view. On such devices
            this method will return true.
            </remarks>
        </member>
        <member name="M:Vuforia.InternalEyewear.SetStereo(System.Boolean)">
            <summary>
            Switch between 2D (mono) and 3D (stereo) modes on eyewear device.
            </summary>
            <param name="enable">set to true to switch to 3D (stereo) mode or false for 2D (mono) mode</param>
            <returns>true if successful or false if the device doesn't support this operation.</returns>
        </member>
        <member name="M:Vuforia.InternalEyewear.GetDefaultSceneScale">
            <summary>
            Returns the default scene scaling for the device.
            </summary>
            <remarks>
            The scene scaling may be used with occluded devices to scale video background
            and augmentations to be the correct size relative to the users view of the
            real world.
            </remarks>
        </member>
        <member name="M:Vuforia.InternalEyewear.getProfileManager">
            <summary>
            Get the calibration profile manager.
            </summary>
            <remarks>Calibration profiles are only relevant to see-through Eyewear devices.</remarks>
            <returns>Returns an instance of <see cref="T:Vuforia.InternalEyewearCalibrationProfileManager"/></returns>
        </member>
        <member name="M:Vuforia.InternalEyewear.getCalibrator">
            <summary>
            Get the user calibrator.
            </summary>
            <returns>Returns an instance of <see cref="T:Vuforia.InternalEyewearUserCalibrator"/></returns>
        </member>
        <member name="M:Vuforia.InternalEyewear.GetProjectionMatrix(Vuforia.InternalEyewear.EyeID,UnityEngine.ScreenOrientation)">
            <summary>
            Get the projection matrix for the specified eye and default calibration profile on see-through devices.
            </summary>
            <param name="eyeID">the eye to get the calibrated projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
            <param name="screenOrientation">the current screen orientation.</param>
        </member>
        <member name="M:Vuforia.InternalEyewear.GetProjectionMatrix(Vuforia.InternalEyewear.EyeID,System.Int32,UnityEngine.ScreenOrientation)">
            <summary>
            Get the projection matrix for the specified eye
            </summary>
            <param name="eyeID">the eye to get the calibrated projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
            <param name="profileID">the calibration profile to use, a default of the current active profile is set.</param>
            <param name="screenOrientation">the current screen orientation.</param>
        </member>
        <member name="P:Vuforia.InternalEyewear.Instance">
            <summary>
            Returns an instance of an Eyewear (thread safe)
            </summary>
        </member>
        <member name="T:Vuforia.InternalEyewear.EyeID">
            <summary>
            Defines which eye the operation is working on
            </summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyeID.EYEID_MONOCULAR">
            <summary>Identifier for a monocular (single) eye</summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyeID.EYEID_LEFT">
            <summary>Identifier for the left eye</summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyeID.EYEID_RIGHT">
            <summary> Identifier for the right eye</summary>
        </member>
        <member name="T:Vuforia.InternalEyewear.EyewearCalibrationReading">
            <summary>Structure for an eyewear calibration reading to be used with EyewearUserCalibration</summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyewearCalibrationReading.pose">
            <summary>Pose matrix from a TrackableResult</summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyewearCalibrationReading.scale">
            <summary>A scale in the range 0.0 - 1.0 that should specify the amount of rendering surface height the calibration shape fills</summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyewearCalibrationReading.centerX">
            <summary>A position in the range -1.0 to 1.0 that specifies the horizontal center of the calibration shape on the rendering surface</summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyewearCalibrationReading.centerY">
            <summary>A position in the range -1.0 to 1.0 that specifies the vertical center of the calibration shape on the rendering surface</summary>
        </member>
        <member name="F:Vuforia.InternalEyewear.EyewearCalibrationReading.unused">
            <summary>Padding bytes for 64bit compatibility</summary>
        </member>
        <member name="T:Vuforia.SmartTerrainInitializationInfo">
            <summary>
            Simple struct containing information about how smart terrain
            was initialized.
            Currently empty, but can be extended in the future without breaking the API.
            </summary>
        </member>
        <member name="T:Vuforia.SmartTerrainTrackableBehaviour">
            <summary>
            This class serves both as an augmentation definition for a smart terrain trackable in the editor
            as well as the reconstructed and tracked trackable at runtime
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainTrackableBehaviour.UpdateMeshAndColliders">
            <summary>
            Updates the mesh based on the current smart terrain trackable
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainTrackableBehaviour.SetAutomaticUpdatesDisabled(System.Boolean)">
            <summary>
            Can be used to explicitly disable automatic mesh and collider updates for individual objects.
            This will only disable updates to the Unity geometry, but internally these objects will keep getting refined
            until SmartTerrainTracker.StopMeshUpdates() is called.
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTrackableBehaviour.SmartTerrainTrackable">
            <summary>
            The smart terrain trackable that this behaviour represents
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTrackableBehaviour.AutomaticUpdatesDisabled">
            <summary>
            If automatic mesh and collider updates have been disabled for this object.
            Returns false by default.
            </summary>
        </member>
        <member name="M:Vuforia.IEditorSurfaceBehaviour.InitializeSurface(Vuforia.Surface)">
            <summary>
            Initializes with a specific surface trackable
            </summary>
        </member>
        <member name="M:Vuforia.IEditorSurfaceBehaviour.SetMeshFilterToUpdate(UnityEngine.MeshFilter)">
            <summary>
            Allows to set which mesh filter should be automatically updated with new mesh revisions
            If set to null, nothing will be updated
            </summary>
        </member>
        <member name="M:Vuforia.IEditorSurfaceBehaviour.SetMeshColliderToUpdate(UnityEngine.MeshCollider)">
            <summary>
            Allows to set which mesh collider should be automatically updated with new mesh revisions
            If set to null, nothing will be updated
            </summary>
        </member>
        <member name="P:Vuforia.IEditorSurfaceBehaviour.MeshFilterToUpdate">
            <summary>
            The mesh filter that will be updated automatically
            </summary>
        </member>
        <member name="P:Vuforia.IEditorSurfaceBehaviour.MeshColliderToUpdate">
            <summary>
            The mesh collider that will be updated automatically
            </summary>
        </member>
        <member name="T:Vuforia.SmartTerrainTrackerAbstractBehaviour">
            <summary>
            This is the main behaviour class that manages the smart terrain tracker
            It comes as a component of the ARCamera prefab but can be use on any other game object as well
            It is important that at any given time, only one instance of this script exists in the scene.
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainTrackerAbstractBehaviour.RegisterTrackerStartedCallback(System.Action)">
            <summary>
            Registers a callback that is called when the tracker has been started
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainTrackerAbstractBehaviour.UnregisterTrackerStartedCallback(System.Action)">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="T:Vuforia.SurfaceAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for a smart terrain surface in the editor
            as well as the reconstructed and tracked surface at runtime
            </summary>
        </member>
        <member name="M:Vuforia.SurfaceAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="P:Vuforia.SurfaceAbstractBehaviour.Surface">
            <summary>
            The surface trackable that this behaviour represents
            </summary>
        </member>
        <member name="T:Vuforia.CylinderTarget">
            <summary>
            A trackable that represents a cylinder or conical object
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTarget.GetSideLength">
            <summary>
            Returns the side length (or slanted height) of the cylinder target in 3D scene units
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTarget.GetTopDiameter">
            <summary>
            Returns the top diameter of the cylinder target in 3D scene units
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTarget.GetBottomDiameter">
            <summary>
            Returns the bottom diameter of the cylinder target in 3D scene units
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTarget.SetSideLength(System.Single)">
            <summary>
            Define a new side length of the cylinder target.
            This will uniformly scale the cylinder and thus also update top and bottom diameter.
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTarget.SetTopDiameter(System.Single)">
            <summary>
            Define a new top diameter of the cylinder target.
            This will uniformly scale the cylinder and thus also update side length and bottom diameter.
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTarget.SetBottomDiameter(System.Single)">
            <summary>
            Define a new bottom diameter of the cylinder target.
            This will uniformly scale the cylinder and thus also update side length and top diameter.
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="T:Vuforia.CylinderTargetAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for a CylinderTarget in the editor
            as well as a tracked CylinderTarget result at runtime
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetAbstractBehaviour.CorrectScaleImpl">
            <summary>
            Scales the Trackable uniformly
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="P:Vuforia.CylinderTargetAbstractBehaviour.CylinderTarget">
            <summary>
            The CylinderTarget that this CylinderTargetBehaviour augments
            </summary>
        </member>
        <member name="P:Vuforia.CylinderTargetAbstractBehaviour.SideLength">
            <summary>
            Get or set the sidelength (slanted height). Changing this value uniformly scales the target.
            </summary>
        </member>
        <member name="P:Vuforia.CylinderTargetAbstractBehaviour.TopDiameter">
            <summary>
            Get or set the top diameter. Changing this value uniformly scales the target.
            </summary>
        </member>
        <member name="P:Vuforia.CylinderTargetAbstractBehaviour.BottomDiameter">
            <summary>
            Get or set the bottom diameter. Changing this value uniformly scales the target.
            </summary>
        </member>
        <member name="T:Vuforia.DataSet">
            <summary>
            This class represents a dataset that can be loaded and holds a collection of trackables.
            Trackables can also be created and destroyed at runtime.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Exists(System.String)">
            <summary>
            Checks if a data set exists at the default "StreamingAssets/QCAR" directory.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Exists(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Checks if a data set exists at the given path.
            Storage type is used to correctly interpret the given path.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Exists(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Checks if a data set exists at the given path.
            Storage type is used to correctly interpret the given path.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Load(System.String)">
            <summary>
            Loads a data set from the default "StreamingAssets/QCAR" directory.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Load(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Loads data set from the given path.
            Storage type is used to correctly interpret the given path.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Load(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Loads data set from the given path.
            Storage type is used to correctly interpret the given path.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.GetTrackables">
            <summary>
            Returns the trackables that are defined in the data set.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.CreateTrackable(Vuforia.TrackableSource,System.String)">
            <summary>
            Creates a new trackable behaviour attached to a new gameobject with the given name and adds it to this dataset
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.CreateTrackable(Vuforia.TrackableSource,UnityEngine.GameObject)">
            <summary>
            Adds a single trackable from a source and a given gameobject to this dataset
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Destroy(Vuforia.Trackable,System.Boolean)">
            <summary>
            This method must not be called while the dataset is active or it will return false.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.HasReachedTrackableLimit">
            <summary>
            Checks if this DataSet's Trackable capacity is reached.
            Returns true if the number of Trackables created in this DataSet
            has reached the maximum capacity, false otherwise.
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.Contains(Vuforia.Trackable)">
            <summary>
            Checks if the given trackable is contained in the DataSet
            </summary>
        </member>
        <member name="M:Vuforia.DataSet.DestroyAllTrackables(System.Boolean)">
            <summary>
            Destroys all existing trackables
            </summary>
        </member>
        <member name="P:Vuforia.DataSet.Path">
            <summary>
            Returns the path to the data set.
            </summary>
        </member>
        <member name="P:Vuforia.DataSet.FileStorageType">
            <summary>
            Returns the storage type of the data set.
            </summary>
        </member>
        <member name="T:Vuforia.DataSet.StorageType">
            <summary>
            Storage type is used to interpret a given path string.
            </summary>
        </member>
        <member name="T:Vuforia.DataSetLoadAbstractBehaviour">
            <summary>
            This behaviour allows to automatically load and activate one or more DataSet on startup
            </summary>
        </member>
        <member name="M:Vuforia.DataSetLoadAbstractBehaviour.LoadDatasets">
            <summary>
            Load Datasets is automatically called by QCARAbstractBehaviour after QCAR has been initialized correctly
            </summary>
        </member>
        <member name="M:Vuforia.DataSetLoadAbstractBehaviour.AddOSSpecificExternalDatasetSearchDirs">
            <summary>
            Override this method to insert new dataset search roots for datasets defined in StreamingAssets/QCAR.  This may
            be used to streamline the "Split Application Binary" Unity feature under the Android plugin.  This method is 
            called before the datasets are loaded and paths may be added using the "AddExternalDatasetRoot(string)".
            </summary>
        </member>
        <member name="M:Vuforia.DataSetLoadAbstractBehaviour.AddExternalDatasetSearchDir(System.String)">
            <summary>
            Add an external path to search for datasets, useful when loading datasets from another location or using Android's OBB feature
            </summary>
        </member>
        <member name="T:Vuforia.RectangleData">
            <summary>
            This struct defines the 2D coordinates of a rectangle. 
            The struct is internally used for setting Virtual Buttons or getting bounding boxes of letters.
            </summary>
        </member>
        <member name="T:Vuforia.RectangleIntData">
            <summary>
            This struct defines the 2D coordinates of a rectangle using integers. 
            The struct is internally used for querying the region of interest for text tracking.
            </summary>
        </member>
        <member name="T:Vuforia.OrientedBoundingBox">
            <summary>
            This struct defines an oriented rectangle.
            It is internally used for defining the oriented bounding box of tword trackables
            </summary>
        </member>
        <member name="P:Vuforia.OrientedBoundingBox.Center">
            <summary>
            Get the center of the box
            </summary>
        </member>
        <member name="P:Vuforia.OrientedBoundingBox.HalfExtents">
            <summary>
            Get half width and height of the box
            </summary>
        </member>
        <member name="P:Vuforia.OrientedBoundingBox.Rotation">
            <summary>
            Get the counter clock wise rotation of the box in degrees
            with respect to the x axis
            </summary>
        </member>
        <member name="T:Vuforia.OrientedBoundingBox3D">
            <summary>
            This struct defines a 3D box oriented around the Y axis.
            It is internally used for defining the oriented bounding box of tword trackables
            </summary>
        </member>
        <member name="P:Vuforia.OrientedBoundingBox3D.Center">
            <summary>
            Get the center of the box
            </summary>
        </member>
        <member name="P:Vuforia.OrientedBoundingBox3D.HalfExtents">
            <summary>
            Get half width and height of the box
            </summary>
        </member>
        <member name="P:Vuforia.OrientedBoundingBox3D.RotationY">
            <summary>
            Get the counter clock wise rotation of the box in degrees
            with respect to the x axis
            </summary>
        </member>
        <member name="T:Vuforia.ICloudRecoEventHandler">
            <summary>
            An interface for handling cloud reco events.
            </summary>
        </member>
        <member name="M:Vuforia.ICloudRecoEventHandler.OnInitialized">
            <summary>
            called when the CloudRecoBehaviour has finished initializing
            </summary>
        </member>
        <member name="M:Vuforia.ICloudRecoEventHandler.OnInitError(Vuforia.TargetFinder.InitState)">
            <summary>
            called when an error is reported during initialization
            </summary>
        </member>
        <member name="M:Vuforia.ICloudRecoEventHandler.OnUpdateError(Vuforia.TargetFinder.UpdateState)">
            <summary>
            called when an error is reported while updating
            </summary>
        </member>
        <member name="M:Vuforia.ICloudRecoEventHandler.OnStateChanged(System.Boolean)">
            <summary>
            called when the CloudRecoBehaviour starts or stops scanning
            </summary>
        </member>
        <member name="M:Vuforia.ICloudRecoEventHandler.OnNewSearchResult(Vuforia.TargetFinder.TargetSearchResult)">
            <summary>
            called when a new search result is found
            </summary>
        </member>
        <member name="T:Vuforia.ILoadLevelEventHandler">
            <summary>
            An interface for handling trackable behaviours when a new level is loaded
            </summary>
        </member>
        <member name="M:Vuforia.ILoadLevelEventHandler.OnLevelLoaded(System.Collections.Generic.IEnumerable{Vuforia.TrackableBehaviour})">
            <summary>
            Called when a new level is loaded and trackable behaviours are kept alive.
            </summary>
            <param name="keptAliveTrackables">All trackable behaviours that are kept alive when changing the scene</param>
        </member>
        <member name="M:Vuforia.ILoadLevelEventHandler.OnDuplicateTrackablesDisabled(System.Collections.Generic.IEnumerable{Vuforia.TrackableBehaviour})">
            <summary>
            Called when a new level is loaded and trackable behaviours are kept alive.
            </summary>
            <param name="disabledTrackables">All trackable behaviours that were disabled because they were duplicates of kept alive trackables</param>
        </member>
        <member name="T:Vuforia.BehaviourComponentFactory">
            <summary>
            Singleton implementation for a factory class used to generate MonoBehaviours whole implementation type is unknown.
            If no external IBehaviourComponentFactory implementation is registered, an internal null implementation is used
            </summary>
        </member>
        <member name="T:Vuforia.IBehaviourComponentFactory">
            <summary>
            This interface is used to allow the generation of MonoBehaviours that implement the
            abstract base behaviour classes from scripts that do not know about them.
            The interface is implemented in a not precompiled class and registers itself at BehaviourComponentFactory.Instance
            </summary>
        </member>
        <member name="T:Vuforia.ImageTarget">
            <summary>
            A trackable behaviour to represent a flat natural feature target.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTarget.CreateVirtualButton(System.String,Vuforia.RectangleData)">
            <summary>
            Creates a new virtual button and adds it to the ImageTarget
            Returns NULL if the corresponding DataSet is currently active.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTarget.GetVirtualButtonByName(System.String)">
            <summary>
            Returns a virtual button by its name
            Returns NULL if no virtual button with that name
            exists in this ImageTarget
            </summary>
        </member>
        <member name="M:Vuforia.ImageTarget.GetVirtualButtons">
            <summary>
             Returns the virtual buttons that are defined for this imageTarget
            </summary>
        </member>
        <member name="M:Vuforia.ImageTarget.DestroyVirtualButton(Vuforia.VirtualButton)">
            <summary>
            Removes and destroys one of the ImageTarget's virtual buttons
            Returns false if the corresponding DataSet is currently active.
            </summary>
        </member>
        <member name="P:Vuforia.ImageTarget.ImageTargetType">
            <summary>
            The type of this ImageTarget (Predefined, User Defined, Cloud Reco)
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoImageTargetImpl.GetSize">
            <summary>
            Returns the size (width and height) of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoImageTargetImpl.SetSize(UnityEngine.Vector3)">
            <summary>
            Sets the size (width and height) of the target (in 3D scene units).
            This is not supported for CloudReco targets.
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoImageTargetImpl.CreateVirtualButton(System.String,Vuforia.RectangleData)">
            <summary>
            Creates a new virtual button and adds it to the ImageTarget
            This is not supported for CloudReco targets.
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoImageTargetImpl.GetVirtualButtonByName(System.String)">
            <summary>
            Returns a virtual button by its name
            This is not supported for CloudReco targets.
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoImageTargetImpl.GetVirtualButtons">
            <summary>
             Returns the virtual buttons that are defined for this imageTarget
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoImageTargetImpl.DestroyVirtualButton(Vuforia.VirtualButton)">
            <summary>
            Removes and destroys one of the ImageTarget's virtual buttons
            This is not supported for CloudReco targets.
            </summary>
        </member>
        <member name="P:Vuforia.CloudRecoImageTargetImpl.ImageTargetType">
            <summary>
            The type of this ImageTarget (Predefined, User Defined, Cloud Reco)
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetImpl.SetSize(UnityEngine.Vector3)">
            <summary>
            Sets the size of the target (in 3D scene units).
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetType">
            <summary>
            The type of an ImageTarget. An ImageTarget can be predefined in a dataset,
            created at runtime as a user defined target, or fetched at runtime via
            cloud recognition
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetData">
            <summary>
            The basic data struct for an ImageTarget
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetBuilder">
            <summary>
            This class encapsulates all functionality needed to create a user defined target on the fly.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilder.Build(System.String,System.Single)">
            <summary>
            Build an Image Target Trackable source from the next available camera frame 
            
            Build an Image Target Trackable Source from the next available camera frame.
            This is an asynchronous process, the result of which will be available from
             getTrackableSource()
            
            This method will return true if the build was successfully started, and false
            if an invalid name or sceenSizeWidth is provided.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilder.StartScan">
            <summary>
            Start the scanning mode, allowing calls to getFrameQuality()
            
            Starts the internal frame scanning process, allowing calls to getFrameQuality()
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilder.StopScan">
            <summary>
            Stop the scanning mode
            
            Stop the scanning mode, getFrameQuality will return FRAME_QUALITY_NONE until
            startScan is called again.  Stopping scan mode will reduce the overall system
            utilization when not building ImageTargets.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilder.GetFrameQuality">
            <summary>
            Get frame quality, available after startScan is called.
            
            Will return the frame quality for the last available camera frame, a value
            of FRAME_QUALITY_NONE will be returned if the scanning mode was not enabled.
            via the startScan() method.
            
            This methods makes a marshalling call into native, so buffer the result
            instead of calling it multiple times a frame for better performance.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilder.GetTrackableSource">
            <summary>
            Returns a trackable source object to be used in adding a new target to a dataset
            
            This method will return a TrackableSource to be provided to the DataSet.  This 
            API will return NULL until a trackable source is available.  This trackable
            source will be provided via this api until build() is called again, at which
            point it will return NULL again until a successful build step has occured.
            
            This methods makes a marshalling call into native, so buffer the result
            instead of calling it multiple times a frame for better performance.
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetBuilder.FrameQuality">
            <summary>
            The frame quality is used to determine if the current frame can be used to create a good target
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Vuforia.ImageTargetBuilder.FrameQuality.FRAME_QUALITY_LOW" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.ImageTargetBuilder.FrameQuality.FRAME_QUALITY_MEDIUM" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.ImageTargetBuilder.FrameQuality.FRAME_QUALITY_HIGH" -->
        <member name="M:Vuforia.CameraDeviceImpl.GetCameraDirection">
            <summary>
            Get the active camera direction.
            </summary>
        </member>
        <member name="M:Vuforia.DataSetImpl.Destroy(Vuforia.Trackable,System.Boolean)">
            <summary>
            This method must not be called while the dataset is active or it will return false.
            </summary>
        </member>
        <member name="M:Vuforia.DataSetImpl.HasReachedTrackableLimit">
            <summary>
            Checks if this DataSet's Trackable capacity is reached.
            Returns true if the number of Trackables created in this DataSet
            has reached the maximum capacity, false otherwise.
            </summary>
        </member>
        <member name="M:Vuforia.DataSetImpl.Contains(Vuforia.Trackable)">
            <summary>
            Checks if the given trackable is contained in the DataSet
            </summary>
        </member>
        <member name="M:Vuforia.DataSetImpl.DestroyAllTrackables(System.Boolean)">
            <summary>
            Destroys all existing trackables
            </summary>
        </member>
        <member name="M:Vuforia.IEditorReconstructionBehaviour.ScaleEditorMeshesByFactor(System.Single)">
            <summary>
            Scales the surface and prop meshes by a given factor (directly affects the mesh data).
            Only used for authoring (to create a ST instance in the same size as the initialization target),
            does not have any affect if called at runtime
            </summary>
        </member>
        <member name="M:Vuforia.IEditorReconstructionBehaviour.ScaleEditorPropPositionsByFactor(System.Single)">
            <summary>
            Scales the prop authoring positions on the surface by a given factor.
            Only used for authoring (to create a ST instance in the same size as the initialization target),
            does not have any affect if called at runtime
            </summary>
        </member>
        <member name="M:Vuforia.IEditorPropBehaviour.InitializeProp(Vuforia.Prop)">
            <summary>
            Initializes with a specific prop trackable
            </summary>
        </member>
        <member name="M:Vuforia.IEditorPropBehaviour.SetMeshFilterToUpdate(UnityEngine.MeshFilter)">
            <summary>
            Allows to set which mesh filter should be automatically updated with new mesh revisions
            If set to null, nothing will be updated
            </summary>
        </member>
        <member name="M:Vuforia.IEditorPropBehaviour.SetMeshColliderToUpdate(UnityEngine.MeshCollider)">
            <summary>
            Allows to set which mesh collider should be automatically updated with new mesh revisions
            If set to null, nothing will be updated
            </summary>
        </member>
        <member name="M:Vuforia.IEditorPropBehaviour.SetBoxColliderToUpdate(UnityEngine.BoxCollider)">
            <summary>
            Allows to set which mesh collider should be automatically updated with new bounding box revisions
            If set to null, nothing will be updated
            </summary>
        </member>
        <member name="P:Vuforia.IEditorPropBehaviour.MeshFilterToUpdate">
            <summary>
            The mesh filter that will be updated automatically
            </summary>
        </member>
        <member name="P:Vuforia.IEditorPropBehaviour.MeshColliderToUpdate">
            <summary>
            The mesh collider that will be updated automatically
            </summary>
        </member>
        <member name="P:Vuforia.IEditorPropBehaviour.BoxColliderToUpdate">
            <summary>
            The box collider that will be updated automatically
            </summary>
        </member>
        <member name="T:Vuforia.WordTemplateMode">
            <summary>
            Specifies if a word prefab is used as generic template or only for specific words
            </summary>
        </member>
        <member name="T:Vuforia.Image">
            <summary>
            An image - Used to expose the camera frame.
            
            The image's pixel buffer can have a different size than the
            Wdith and Height properties report. This is e.g. the
            case when an image is used for rendering as a texture without
            non-power-of-two support.
            The real size of the image's pixel buffer can be queried using
            BufferWidth and BufferHeight. 
            </summary>
        </member>
        <member name="M:Vuforia.Image.IsValid">
            <summary>
            Returns true if this image has been fully initiailzed with valid data.
            False otherwise.
            </summary>
        </member>
        <member name="M:Vuforia.Image.CopyToTexture(UnityEngine.Texture2D)">
            <summary>
            Copies the image into the given texture. The texture will be resized if necessary.
            </summary>
        </member>
        <member name="P:Vuforia.Image.Width">
            <summary>
            The width of the image in pixels. Note the pixel buffer can be
            wider than this.
            </summary>
        </member>
        <member name="P:Vuforia.Image.Height">
            <summary>
            The height of the image in pixels. Note that the pixel buffer
            can be higher than this.
            </summary>
        </member>
        <member name="P:Vuforia.Image.Stride">
            <summary>
            The number bytes from one row of pixels to the next row.
            </summary>
        </member>
        <member name="P:Vuforia.Image.BufferWidth">
            <summary>
            The number of pixel columns that fit into the pixel buffer.
            </summary>
        </member>
        <member name="P:Vuforia.Image.BufferHeight">
            <summary>
            The number of rows that fit into the pixel buffer.
            </summary>
        </member>
        <member name="P:Vuforia.Image.PixelFormat">
            <summary>
            The pixel format of the image.
            </summary>
        </member>
        <member name="P:Vuforia.Image.Pixels">
            <summary>
            The pixel data.
            </summary>
        </member>
        <member name="T:Vuforia.Image.PIXEL_FORMAT">
            <summary>
            The pixel format of an image
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetBuilderImpl">
            <summary>
            This class encapsulates all functionality needed to create a user defined target on the fly.
            The State property exposes information about the current mode, frame quality and the building process.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilderImpl.Build(System.String,System.Single)">
            <summary>
             Build an Image Target Trackable source from the next available camera frame 
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilderImpl.StartScan">
            <summary>
            Start the scanning mode, allowing calls to getFrameQuality()
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilderImpl.StopScan">
            <summary>
            Stop the scanning mode
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilderImpl.GetFrameQuality">
            <summary>
            Get frame quality, available after startScan is called.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBuilderImpl.GetTrackableSource">
            <summary>
            Returns a trackable source object to be used in adding a new target to a dataset
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetImpl.CreateVirtualButton(System.String,Vuforia.RectangleData)">
            <summary>
            Creates a new virtual button and adds it to the ImageTarget
            Returns NULL if the corresponding DataSet is currently active.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetImpl.GetVirtualButtonByName(System.String)">
            <summary>
            Returns a virtual button by its name
            Returns NULL if no virtual button with that name
            exists in this ImageTarget
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetImpl.GetVirtualButtons">
            <summary>
             Returns the virtual buttons that are defined for this imageTarget
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetImpl.DestroyVirtualButton(Vuforia.VirtualButton)">
            <summary>
            Removes and destroys one of the ImageTarget's virtual buttons
            Returns false if the corresponding DataSet is currently active.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetImpl.CreateVirtualButtonsFromNative">
            <summary>
            Creates virtual buttons for this ImageTarget from native and stores them
            </summary>
        </member>
        <member name="P:Vuforia.ImageTargetImpl.ImageTargetType">
            <summary>
            The type of this ImageTarget (Predefined, User Defined, Cloud Reco)
            </summary>
        </member>
        <member name="T:Vuforia.ObjectTracker">
            <summary>
            The ObjectTracker encapsulates methods to manage DataSets and provides access to
            the ImageTargetBuilder and TargetFinder classes
            </summary>
        </member>
        <member name="T:Vuforia.Tracker">
            <summary>
            The common base class for the ObjectTracker, the MarkerTracker and the SmartTerrainTracker
            </summary>
        </member>
        <member name="M:Vuforia.Tracker.Start">
            <summary>
            Starts the Tracker
            </summary>
        </member>
        <member name="M:Vuforia.Tracker.Stop">
            <summary>
            Stops the Tracker
            </summary>
        </member>
        <member name="P:Vuforia.Tracker.IsActive">
            <summary>
            If the Tracker is currently active
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.CreateDataSet">
            <summary>
            Creates a new empty dataset.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.DestroyDataSet(Vuforia.DataSet,System.Boolean)">
            <summary>
            Destroy the given dataset.
            Returns false if the given dataset is active.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.ActivateDataSet(Vuforia.DataSet)">
            <summary>
            Activates the given dataset.
            Datasets can only be activated when the tracker is not running.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.DeactivateDataSet(Vuforia.DataSet)">
            <summary>
            Deactivates the given dataset.
            This can only be done when the tracker is not running.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.GetActiveDataSets">
            <summary>
            Returns the currently activated datasets. 
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.GetDataSets">
            <summary>
            Returns all datasets.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.DestroyAllDataSets(System.Boolean)">
            <summary>
            Deactivates the currently active dataset and
            destroys all datasets
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.PersistExtendedTracking(System.Boolean)">
            <summary>
            Enables/disables persistent extended tracking
            In persistent extended tracking mode, the environment map will only
            ever be reset when the developer calls resetExtendedTracking().
            This function will return true if persistent extended tracking
            was set successfully (or was already set to the specified value)
            and false otherwise.
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTracker.ResetExtendedTracking">
            <summary>
            Resets environment map for extended tracking
            Environment map can only be reset by the developer if persistent
            extended tracking is enabled and if the tracker is stopped.
            This function will return true if environment map was reset
            successfully and false otherwise.
            </summary>
        </member>
        <member name="P:Vuforia.ObjectTracker.ImageTargetBuilder">
            <summary>
            exposes the ImageTargetBuilder member to other classes
            </summary>
        </member>
        <member name="P:Vuforia.ObjectTracker.TargetFinder">
            <summary>
            exposes the ImageTargetBuilder member to other classes
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTrackerImpl.PersistExtendedTracking(System.Boolean)">
            <summary>
            Enables/disables persistent extended tracking
            </summary>
        </member>
        <member name="M:Vuforia.ObjectTrackerImpl.ResetExtendedTracking">
            <summary>
            Resets environment map for extended tracking
            </summary>
        </member>
        <member name="T:Vuforia.Marker">
            <summary>
            A trackable behaviour for representing rectangular markers.
            </summary>
        </member>
        <member name="M:Vuforia.Marker.GetSize">
            <summary>
            Returns the size (width and height) of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.Marker.SetSize(System.Single)">
            <summary>
            Set the side (width and height) of the target (in 3D scene units).
            </summary>
        </member>
        <member name="P:Vuforia.Marker.MarkerID">
            <summary>
            The marker id is an ID between 0 and 511 that represents different frame markers
            </summary>
        </member>
        <member name="T:Vuforia.MarkerTracker">
            <summary>
            This class handles marker creation and management at runtime
            </summary>
        </member>
        <member name="M:Vuforia.MarkerTracker.CreateMarker(System.Int32,System.String,System.Single)">
            <summary>
            Creates a marker with the given id, name, and size.
            Registers the marker at native code.
            Returns a MarkerBehaviour object to receive updates.
            </summary>
        </member>
        <member name="M:Vuforia.MarkerTracker.DestroyMarker(Vuforia.Marker,System.Boolean)">
            <summary>
            Destroys the Marker at native code.
            </summary>
        </member>
        <member name="M:Vuforia.MarkerTracker.GetMarkers">
            <summary>
            Returns the markers registered in native.
            </summary>
        </member>
        <member name="M:Vuforia.MarkerTracker.GetMarkerByMarkerID(System.Int32)">
            <summary>
            Returns the Marker with the given MarkerID.
            Returns null if none is found.
            </summary>
        </member>
        <member name="M:Vuforia.MarkerTracker.DestroyAllMarkers(System.Boolean)">
            <summary>
            Destroys all existing markers
            </summary>
        </member>
        <member name="T:Vuforia.MultiTarget">
            <summary>
            A trackable that is made up of multiple targets with a fixed spatial
            relation.
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetImpl.GetSize">
            <summary>
            Returns the size  of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetImpl.SetSize(UnityEngine.Vector3)">
            <summary>
            Sets the size of the target (in 3D scene units).
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="T:Vuforia.NullWebCamTexAdaptor">
            <summary>
            Null implementation for a WebCamTexture
            Used in case no webcam is connected
            </summary>
        </member>
        <member name="T:Vuforia.WebCamTexAdaptor">
            <summary>
            This class serves as a thin abstraction layer between Unity's WebCamTexture and Vuforia
            It is also Null-implemented for the case where no webcam is connected.
            </summary>
        </member>
        <member name="P:Vuforia.NullWebCamTexAdaptor.DidUpdateThisFrame">
            <summary>
            fake the requested fps - report back a new frame every x milliseconds
            if we reported back a new frame every time, this would cause a performance issue.
            </summary>
        </member>
        <member name="T:Vuforia.PlayModeEditorUtility">
            <summary>
            Singleton implementation for a utilty class used in Play mode to access various editor functionalities.
            If no external IPlayModeEditorUtility implementation is registered, an internal null implementation is used
            </summary>
        </member>
        <member name="T:Vuforia.IPlayModeEditorUtility">
            <summary>
            This interface decouples editor specific functionality used in play mode from the runtime classes
            to avoid dependencies to UnityEditor from the main extension codebase.
            The interface is implemented in the Editor library and registered in Play Mode at the PlayModeEditorUtility singleton.
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.DisplayDialog(System.String,System.String,System.String)">
            <summary>
            Displays a popup dialog in the Unity editor
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.LoadAndParseWebcamProfiles(System.String)">
            <summary>
            Loads web cam profiles from an XML file at a given path and returns all of them
            including the default profile
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.RestartPlayMode">
            <summary>
            Forces a restart of Play Mode in the Editor.
            It is called when Unity re-compiles the scripts shortly after starting play mode.
            </summary>
        </member>
        <member name="T:Vuforia.QCARManager">
            <summary>
            The QCARManager manages updating trackables, their state and position to the camera
            It is called from the QCARBehaviour.
            </summary>
        </member>
        <member name="M:Vuforia.QCARManager.Init">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:Vuforia.QCARManager.Deinit">
            <summary>
            Free globally allocated containers
            </summary>
        </member>
        <member name="P:Vuforia.QCARManager.Instance">
            <summary>
            Returns an instance of a QCARManager (thread safe)
            </summary>
        </member>
        <member name="P:Vuforia.QCARManager.WorldCenterMode">
            <summary>
            World Center Mode setting on the ARCamera
            </summary>
        </member>
        <member name="P:Vuforia.QCARManager.WorldCenter">
            <summary>
            World Center setting on the ARCamera
            </summary>
        </member>
        <member name="P:Vuforia.QCARManager.ARCameraTransform">
            <summary>
            A handle to the ARCamera Transform object
            </summary>
        </member>
        <member name="P:Vuforia.QCARManager.Initialized">
            <summary>
            returns true once the QCARManager has been initialized
            </summary>
        </member>
        <member name="P:Vuforia.QCARManager.QCARFrameIndex">
            <summary>
            The frame index of the current QCAR state
            </summary>
        </member>
        <member name="M:Vuforia.QCARManagerImpl.Update(UnityEngine.ScreenOrientation)">
            <summary>
            Process the camera image and tracking data for this frame.
            Returns false if frame has already been handled and no trackable updates are necessary.
            </summary>
        </member>
        <member name="M:Vuforia.QCARManagerImpl.Pause(System.Boolean)">
            <summary>
            Turns pausing on or off.
            Pausing will freeze the camera video and all trackables will remain in their current state.
            Autorotation will be disabled during video background freezing.
            </summary>
        </member>
        <member name="P:Vuforia.QCARManagerImpl.Initialized">
            <summary>
            returns true once the QCARManager has been initialized
            </summary>
        </member>
        <member name="P:Vuforia.QCARManagerImpl.QCARFrameIndex">
            <summary>
            The frame index of the current QCAR state
            </summary>
        </member>
        <member name="T:Vuforia.QCARRenderer">
            <summary>
            This class takes care about rendering the video background in the right size and orientation
            </summary>
        </member>
        <member name="M:Vuforia.QCARRenderer.GetVideoBackgroundConfig">
            <summary>
            Retrieves the current layout configuration of the video background.
            </summary>
        </member>
        <member name="M:Vuforia.QCARRenderer.ClearVideoBackgroundConfig">
            <summary>
            clears the config of the videobackground when QCAR is stopped.
            </summary>
        </member>
        <member name="M:Vuforia.QCARRenderer.SetVideoBackgroundConfig(Vuforia.QCARRenderer.VideoBGCfgData)">
            <summary>
            Configures the layout of the video background (location on the screen
            and size).
            </summary>
        </member>
        <member name="M:Vuforia.QCARRenderer.SetVideoBackgroundTexture(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Tells QCAR where the texture id to use for updating video background data.
            The native texture ID needs to be passed in as a separate parameter.
            When using multihreaded rendering, in particular when also using the Oculus SDK
            on the GearVR, this texture ID needs to be resolved in an Awake method
            (texture.GetNativeTextureID())
            </summary>
        </member>
        <member name="M:Vuforia.QCARRenderer.IsVideoBackgroundInfoAvailable">
            <summary>
            Check if video background info is available
            </summary>
        </member>
        <member name="M:Vuforia.QCARRenderer.GetVideoTextureInfo">
            <summary>
            Returns the texture info associated with the current video background
            </summary>
        </member>
        <member name="M:Vuforia.QCARRenderer.Pause(System.Boolean)">
            <summary>
            Turns pausing on or off.
            Pausing will freeze the camera video and all trackables will remain in their current state.
            Autorotation will be disabled during video background freezing.
            </summary>
        </member>
        <member name="P:Vuforia.QCARRenderer.Instance">
            <summary>
            Returns an instance of a QCARRenderer (thread safe)
            </summary>
        </member>
        <member name="P:Vuforia.QCARRenderer.InternalInstance">
            <summary>
            Returns an internal instance of a QCARRendererImpl
            </summary>
        </member>
        <member name="P:Vuforia.QCARRenderer.VideoBackgroundTexture">
            <summary>
            The texture the video background is rendered into
            </summary>
        </member>
        <member name="T:Vuforia.QCARRenderer.VideoBackgroundReflection">
            <summary>
            If the video background image is mirrored horizontally (useful when the front camera is used)
            </summary>
        </member>
        <member name="T:Vuforia.QCARRenderer.VideoBGCfgData">
            <summary>
            This struct stores Video Background configuration data. It stores if
            background rendering is enabled, if it happens synchronously and it
            stores position and size of the video background on the screen.
            </summary>
        </member>
        <member name="T:Vuforia.QCARRenderer.Vec2I">
            <summary>
            This struct stores 2D integer vectors.
            </summary>
        </member>
        <member name="T:Vuforia.QCARRenderer.VideoTextureInfo">
            <summary>
            Describes the size of the texture in the graphics unit as well as
            the size of the image inside the texture. The latter corresponds
            to the size of the image delivered by the camera
            </summary>
        </member>
        <member name="M:Vuforia.QCARRendererImpl.Pause(System.Boolean)">
            <summary>
            Turns pausing on or off.
            Pausing will freeze the camera video and all trackables will remain in their current state.
            Autorotation will be disabled during video background freezing.
            </summary>
        </member>
        <member name="M:Vuforia.QCARRendererImpl.UnityRenderEvent(Vuforia.QCARRendererImpl.RenderEvent)">
            <summary>
            invokes a native rendering event using Unity rendering callback mechanism
            if MT rendering is enabled, this callback will be invoked from the rendering thread.
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnityImpl.Deinit">
            Deinitializes Vuforia
        </member>
        <member name="T:Vuforia.SmartTerrainTrackable">
            <summary>
            A smart terrain trackable which is reconstructed as part of the smart terrain
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainTrackable.GetMesh">
            <summary>
            Get the mesh of the smart terrain trackable.
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTrackable.MeshRevision">
            <summary>
            Get the mesh revision, which is increased whenever the geometry of the smart terrain trackable is updated.
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTrackable.LocalPosition">
            <summary>
            Get the local 3D position of the smart terrain trackable relative to the parent
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTrackable.Parent">
            <summary>
            The parent trackable in the Smart Terrain scene graph hierarchy.
            If this is the root node, Parent is null
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTrackable.Children">
            <summary>
            All child trackables in beneath this node in the Smart Terrain scene graph hierarchy.
            </summary>
        </member>
        <member name="T:Vuforia.Surface">
            <summary>
            A smart terrain trackable that is reconstructing a surface with props on top
            </summary>
        </member>
        <member name="M:Vuforia.Surface.GetNavMesh">
            <summary>
            Get the nav mesh of this surface.
            </summary>
        </member>
        <member name="M:Vuforia.Surface.GetMeshBoundaries">
            <summary>
            Returns the line list that represents all boundaries.
            Each consecutive pair of indices defines a line segment. As a whole this
            defines a polygon that represents the outer extents of the Surface mesh.
            The indices refer to points in the mesh.
            </summary>
        </member>
        <member name="M:Vuforia.Surface.GetArea">
            <summary>
            Calculates the area that is covered by the surface mesh (in scene units)
            </summary>
        </member>
        <member name="P:Vuforia.Surface.BoundingBox">
            <summary>
            Returns the axis-aligned bounding box of the ground mesh
            The bounding box will change over time.
            </summary>
        </member>
        <member name="T:Vuforia.SmartTerrainBuilderImpl">
            <summary>
            This class is used to manage all trackables of smart terrain
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.Init">
            <summary>
            Initializes the SmartTerrainBuilder.
            This is automatically called from the SmartTerrainTrackerBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.Deinit">
            <summary>
            Deinitializes the SmartTerrainBuilder.
            This is automatically called from the SmartTerrainTrackerBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.GetReconstructions">
            <summary>
            Returns active smart terrain or null if no smart terrain is active
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.CreateReconstruction``1">
            <summary>
            Factory method to create reconstruction objects
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.AddReconstruction(Vuforia.ReconstructionAbstractBehaviour)">
            <summary>
            Adds a reconstruction to the builder. This will start the reconstruction.
            If the Reconstruction has "Automatic start" selected in the inspector, this will be called automatically.
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.RemoveReconstruction(Vuforia.ReconstructionAbstractBehaviour)">
            <summary>
            Removes a previously added reconstruction to the builder. This will stop the reconstruction.
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.DestroyReconstruction(Vuforia.Reconstruction)">
            <summary>
            Cleans up a previously created reconstruction object
            Automatically called from the ReconstructionFromTarget or ReconstructionFromEnvironment Behaviours
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainBuilderImpl.UpdateSmartTerrainData(Vuforia.QCARManagerImpl.SmartTerrainRevisionData[],Vuforia.QCARManagerImpl.SurfaceData[],Vuforia.QCARManagerImpl.PropData[])">
            <summary>
            Update mesh of smart terrain if necessary
            </summary>
        </member>
        <member name="T:Vuforia.Prop">
            <summary>
            A 3D object - prop - which is reconstructed as part of smart terrain
            </summary>
        </member>
        <member name="P:Vuforia.Prop.BoundingBox">
            <summary>
            The bounding box of the smart terrain trackable, oriented around the y axis
            </summary>
        </member>
        <member name="T:Vuforia.SmartTerrainTrackerImpl">
            <summary>
            This class handles Text Tracking and defining the detection and tracking area at runtime
            </summary>
        </member>
        <member name="T:Vuforia.SmartTerrainTracker">
            <summary>
            This class handles Text Tracking and defining the detection and tracking area at runtime
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainTracker.SetScaleToMillimeter(System.Single)">
            <summary>
            Set the scaling factor for SmartTerrain trackables from scene units into millimeters.
            The default scaling factor is 1.0.
            Returns false if the tracker is not in the stopped state, true if the scale is non-zero and
            we are able to set the scale factor.
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTracker.ScaleToMillimeter">
            <summary>
            The scaling factor for SmartTerrain trackables from scene units into millimeters
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTracker.SmartTerrainBuilder">
            <summary>
            Returns the SmartTerrainBuilder Instance 
            </summary>
        </member>
        <member name="M:Vuforia.SmartTerrainTrackerImpl.SetScaleToMillimeter(System.Single)">
            <summary>
            Set the scaling factor for SmartTerrain trackables from scene units into millimeters.
            The default scaling factor is 1.0.
            Returns false if the tracker is not in the stopped state, true if the scale is non-zero and
            we are able to set the scale factor.
            </summary>
        </member>
        <member name="P:Vuforia.SmartTerrainTrackerImpl.ScaleToMillimeter">
            <summary>
            The scaling factor for SmartTerrain trackables from scene units into millimeters
            </summary>
        </member>
        <member name="T:Vuforia.TextTracker">
            <summary>
            This class handles Text Tracking and defining the detection and tracking area at runtime
            </summary>
        </member>
        <member name="M:Vuforia.TextTracker.SetRegionOfInterest(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            Defines the areas of the image in screen coordinates where text can be detected and tracked.
            </summary>
        </member>
        <member name="M:Vuforia.TextTracker.GetRegionOfInterest(UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Returns the areas of the image in screen coordinates where text can be detected and tracked.
            </summary>
        </member>
        <member name="P:Vuforia.TextTracker.WordList">
            <summary>
            Get the word list used for tracking text
            </summary>
        </member>
        <member name="M:Vuforia.TextTrackerImpl.SetRegionOfInterest(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            Defines the areas of the image in screen coordinates where text can be detected and tracked.
            </summary>
        </member>
        <member name="M:Vuforia.TextTrackerImpl.GetRegionOfInterest(UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary>
            Returns the areas of the image in screen coordinates where text can be detected and tracked.
            </summary>
        </member>
        <member name="P:Vuforia.TextTrackerImpl.WordList">
            <summary>
            Get the word list used for tracking text
            </summary>
        </member>
        <member name="T:Vuforia.TextTrackerImpl.UpDirection">
            <summary>
            Defines the up direction for tracking text in relation to landscape left.
            </summary>
        </member>
        <member name="T:Vuforia.TypeMapping">
            <summary>
            An internal helper class meant to map C# types to native Types
            </summary>
        </member>
        <member name="M:Vuforia.TypeMapping.GetTypeID(System.Type)">
            <summary>
            Returns a unique id for a type in native. Will throw an exception when asked for an unknown type
            </summary>
        </member>
        <member name="T:Vuforia.WebCamTexAdaptorImpl">
            <summary>
            This class serves as a thin abstraction layer between Unity's WebCamTexture and Vuforia
            </summary>
        </member>
        <member name="T:Vuforia.Word">
            <summary>
            A word represents a single element of writing that has been detected.
            It only contains static information about the word which does not change per frame
            </summary>
        </member>
        <member name="M:Vuforia.Word.GetLetterMask">
            <summary>
            Returns an image representing the bit mask of the letters in the word.
            Each pixel in the image is represented by a byte (8-bit value).
            A value of 255 represents an empty area, i.e. a pixel not covered 
            by any letter of the word.
            If a pixel is covered by a letter, then the pixel value represents 
            the position of that letter in the word, i.e. 0 for the first character,
            1 for the second, 2 for the third, and so on.
            </summary>
        </member>
        <member name="M:Vuforia.Word.GetLetterBoundingBoxes">
            <summary>
            Returns the axis-aligned bounding boxes for all letters of the word. These are defined in the range of [0, 1] which corresponds to the whole bounding box of the word.
            </summary>
        </member>
        <member name="P:Vuforia.Word.StringValue">
            <summary>
            Get the string value of the tracked word
            </summary>
        </member>
        <member name="P:Vuforia.Word.Size">
            <summary>
            Returns the size of the tracked word in 3D scene units
            </summary>
        </member>
        <member name="M:Vuforia.WordImpl.GetLetterMask">
            <summary>
            Returns an image representing the bit mask of the letters in the word.
            Each pixel in the image is represented by a byte (8-bit value).
            A value of 255 represents an empty area, i.e. a pixel not covered 
            by any letter of the word.
            If a pixel is covered by a letter, then the pixel value represents 
            the position of that letter in the word, i.e. 0 for the first character,
            1 for the second, 2 for the third, and so on.
            </summary>
        </member>
        <member name="M:Vuforia.WordImpl.GetLetterBoundingBoxes">
            <summary>
            Returns the axis-aligned bounding boxes for all letters of the word. These are defined in the range of [0, 1] which corresponds to the whole bounding box of the word.
            </summary>
        </member>
        <member name="P:Vuforia.WordImpl.StringValue">
            <summary>
            Get the string value of the tracked word
            </summary>
        </member>
        <member name="P:Vuforia.WordImpl.Size">
            <summary>
            Returns the size of the tracked word in 3D scene units
            </summary>
        </member>
        <member name="T:Vuforia.WordManager">
            <summary>
            This class is used to manage all word trackables
            </summary>
        </member>
        <member name="M:Vuforia.WordManager.GetActiveWordResults">
            <summary>
            Returns all currently tracked WordResults
            </summary>
        </member>
        <member name="M:Vuforia.WordManager.GetNewWords">
            <summary>
            Returns all words that have been newly detected in the last frame
            </summary>
        </member>
        <member name="M:Vuforia.WordManager.GetLostWords">
            <summary>
            Returns all words that have been lost in the last frame and won't be tracked anymore
            </summary>
        </member>
        <member name="M:Vuforia.WordManager.TryGetWordBehaviour(Vuforia.Word,Vuforia.WordAbstractBehaviour@)">
            <summary>
            Get the word behaviour that is associated with a currently tracked word
            </summary>
            <param name="word">trackable</param>
            <param name="behaviour">resulting word behaviour, might be null if specified word is not associated to a behaviour</param>
            <returns>returns true if word behaviour exists for specified word trackable</returns>
        </member>
        <member name="M:Vuforia.WordManager.GetTrackableBehaviours">
            <summary>
            Returns all currently instantiated word behaviours
            </summary>
        </member>
        <member name="M:Vuforia.WordManager.DestroyWordBehaviour(Vuforia.WordAbstractBehaviour,System.Boolean)">
            <summary>
            Remove a specific word behaviour from list and optionally destroy game object.
            This might also remove a template, i.e. no further trackables will be augmented for a specific word or for a template
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.GetActiveWordResults">
            <summary>
            Returns all currently tracked WordResults
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.GetNewWords">
            <summary>
            Returns all words that have been newly detected in the last frame
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.GetLostWords">
            <summary>
            Returns all words that have been lost in the last frame and won't be tracked anymore
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.TryGetWordBehaviour(Vuforia.Word,Vuforia.WordAbstractBehaviour@)">
            <summary>
            Get the word behaviour that is associated with a currently tracked word
            </summary>
            <param name="word">trackable</param>
            <param name="behaviour">resulting word behaviour, might be null if specified word is not associated to a behaviour</param>
            <returns>returns true if word behaviour exists for specified word trackable</returns>
        </member>
        <member name="M:Vuforia.WordManagerImpl.GetTrackableBehaviours">
            <summary>
            Returns all currently instantiated word behaviours
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.DestroyWordBehaviour(Vuforia.WordAbstractBehaviour,System.Boolean)">
            <summary>
            Remove a specific word behaviour from list and optionally destroy game object.
            This might also remove a template, i.e. no further trackables will be augmented for a specific word or for a template
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.InitializeWordBehaviourTemplates(Vuforia.WordPrefabCreationMode,System.Int32)">
            <summary>
            Gathers all Word Prefabs and create instances up to the specified number
            </summary>
            <param name="wordPrefabCreationMode">whether word prefabs are used or not</param>
            <param name="maxInstances">Maximum instances per prefab</param>
        </member>
        <member name="M:Vuforia.WordManagerImpl.RemoveDestroyedTrackables">
            <summary>
            Remove all word behaviours from the dictionary which are not valid anymore.
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.UpdateWords(UnityEngine.Transform,Vuforia.QCARManagerImpl.WordData[],Vuforia.QCARManagerImpl.WordResultData[])">
            <summary>
            Update currently tracked words
            </summary>
            <param name="arCameraTransform">Word trackables will be positioned relative to this transform</param>
            <param name="newWordData">words that have been newly detected in the last frame</param>
            <param name="wordResults">all words that are currently tracked</param>
        </member>
        <member name="M:Vuforia.WordManagerImpl.SetWordBehavioursToNotFound">
            <summary>
            Marks all WordBehaviours as "not found"
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.AssociateWordResultsWithBehaviours">
            <summary>
            Associate multiple words with word behaviours. This function prefers word results that are already in the waiting queue over new words.
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.UnregisterLostWords">
            <summary>
            Unregister lost words and remove the association with a word behaviour
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.AssociateWordBehaviour(Vuforia.WordResult)">
            <summary>
            Associate a word result with a word behaviour
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.InstantiateWordBehaviour(Vuforia.WordAbstractBehaviour)">
            <summary>
            create a new instance of the input word behaviour
            </summary>
        </member>
        <member name="M:Vuforia.WordManagerImpl.CreateWordBehaviour">
            <summary>
            creates a game object with a word behaviour
            </summary>
        </member>
        <member name="T:Vuforia.WordResultImpl">
            <summary>
            A WordResult provides the current state of a Word.
            It contains all dynamic information that changes frame-to-frame, 
            i.e. which is based on the current pose of the word
            </summary>
        </member>
        <member name="T:Vuforia.WordResult">
            <summary>
            A WordResult provides the current state of a Word.
            It contains all dynamic information that changes frame-to-frame, 
            i.e. which is based on the current pose of the word
            </summary>
        </member>
        <member name="P:Vuforia.WordResult.Word">
            <summary>
            Get the corresponding Word-object of this trackable
            </summary>
        </member>
        <member name="P:Vuforia.WordResult.Obb">
            <summary>
            Get the oriented 2D bounding box of the word in image space
            </summary>
        </member>
        <member name="P:Vuforia.WordResult.Position">
            <summary>
            Get the position of the current pose of the trackable
            </summary>
        </member>
        <member name="P:Vuforia.WordResult.Orientation">
            <summary>
            Get the rotation of the current pose of the trackable
            </summary>
        </member>
        <member name="P:Vuforia.WordResult.CurrentStatus">
            <summary>
            Get the current status of the trackable
            </summary>
        </member>
        <member name="P:Vuforia.WordResultImpl.Word">
            <summary>
            Get the corresponding Word-object of this trackable
            </summary>
        </member>
        <member name="P:Vuforia.WordResultImpl.Position">
            <summary>
            Get the position of the current pose of the trackable
            </summary>
        </member>
        <member name="P:Vuforia.WordResultImpl.Orientation">
            <summary>
            Get the rotation of the current pose of the trackable
            </summary>
        </member>
        <member name="P:Vuforia.WordResultImpl.Obb">
            <summary>
            Get the oriented 2D bounding box of the word in image space
            </summary>
        </member>
        <member name="P:Vuforia.WordResultImpl.CurrentStatus">
            <summary>
            Get the current status of the trackable
            </summary>
        </member>
        <member name="T:Vuforia.WordListImpl">
            <summary>
            This class represents a list of words that can be detected and tracked.
            Custom words and filter lists can be defined for a word list.
            </summary>
        </member>
        <member name="T:Vuforia.WordList">
            <summary>
            This class represents a list of words that can be detected and tracked.
            Custom words and filter lists can be defined for a word list.
            
            The WordList represents the set of detectable Words. This list is
            loaded from a binary data file using LoadWordListFile.
            The application may choose to add a small set of additional custom words to
            the WordList using the APIs below.
            The filter list allows an application to specify a subset of Words
            from the WordList that will be detected and tracked. 
            Note that the TextTracker needs to be stopped prior to making modifications
            to the WordList.
            </summary>
        </member>
        <member name="M:Vuforia.WordList.LoadWordListFile(System.String)">
            <summary>
            Loads the word list from a binary file at the default 
            "Assets/StreamingAssets" directory.
            </summary>
        </member>
        <member name="M:Vuforia.WordList.LoadWordListFile(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Loads the word list from a binary file at the specified path and storage
            location
            </summary>
        </member>
        <member name="M:Vuforia.WordList.LoadWordListFile(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Loads the word list from a binary file at the specified path and storage
            location
            </summary>
        </member>
        <member name="M:Vuforia.WordList.AddWordsFromFile(System.String)">
            <summary>
            Loads a set of custom words from a plain text file at the default 
            "Assets/StreamingAssets" directory.
            </summary>
        </member>
        <member name="M:Vuforia.WordList.AddWordsFromFile(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Loads a set of custom words from a plain text file at the specified 
            path and storage location
            The word list is extended with the custom words in the plain text file.
            No more than 10.000 custom words can be added to the word list. Each word
            must be between 2-45 characters in length. Returns the
            number of loaded custom words. The text file shall be encoded in UTF-8.
            </summary>
            <returns>Number of words that have been added</returns>
        </member>
        <member name="M:Vuforia.WordList.AddWordsFromFile(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Loads a set of custom words from a plain text file at the specified 
            path and storage location
            The word list is extended with the custom words in the plain text file.
            No more than 10.000 custom words can be added to the word list. Each word
            must be between 2-45 characters in length. Returns the
            number of loaded custom words. The text file shall be encoded in UTF-8.
            </summary>
            <returns>Number of words that have been added</returns>
        </member>
        <member name="M:Vuforia.WordList.AddWord(System.String)">
            <summary>
            Add a single custom word to the word list
            Use ContainsWord to check if the word is already in the word list prior
            to calling this.
            </summary>
        </member>
        <member name="M:Vuforia.WordList.RemoveWord(System.String)">
            <summary>
            Remove a custom word from the word list
            </summary>
        </member>
        <member name="M:Vuforia.WordList.ContainsWord(System.String)">
            <summary>
            Returns true if the given word is present in the WordList 
            </summary>
        </member>
        <member name="M:Vuforia.WordList.UnloadAllLists">
            <summary>
            Clears the word list as well as the filter list and releases resources.
            </summary>
        </member>
        <member name="M:Vuforia.WordList.GetFilterMode">
            <summary>
            Returns the filter mode
            </summary>
        </member>
        <member name="M:Vuforia.WordList.SetFilterMode(Vuforia.WordFilterMode)">
            <summary>
            Sets the mode for the filter list
            The filter list allows an application to specify a subset of Words
            from the word list that will be detected and tracked. It can do this
            in two modes of operation. In black list mode, any word in the filter
            list will be prevented from being detected. In the white list mode,
            only words in the the filter list can be detected.
            </summary>
        </member>
        <member name="M:Vuforia.WordList.LoadFilterListFile(System.String)">
            <summary>
            Loads the filter list from a plain text file at the default 
            "Assets/StreamingAssets" directory.
            </summary>
        </member>
        <member name="M:Vuforia.WordList.LoadFilterListFile(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Loads the filter list from a plain text file at the specified 
            path and storage location
            </summary>
        </member>
        <member name="M:Vuforia.WordList.LoadFilterListFile(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Loads the filter list from a plain text file at the specified 
            path and storage location
            </summary>
        </member>
        <member name="M:Vuforia.WordList.AddWordToFilterList(System.String)">
            <summary>
            Add a single word to the filter list 
            </summary>
        </member>
        <member name="M:Vuforia.WordList.RemoveWordFromFilterList(System.String)">
            <summary>
            Remove a word from the filter list 
            </summary>
        </member>
        <member name="M:Vuforia.WordList.ClearFilterList">
            <summary>
            Clear the filter list
            </summary>
        </member>
        <member name="M:Vuforia.WordList.GetFilterListWordCount">
            <summary>
            Query the number of words in the filter list
            </summary>
        </member>
        <member name="M:Vuforia.WordList.GetFilterListWord(System.Int32)">
            <summary>
            Returns the ith element in the filter list
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.LoadWordListFile(System.String)">
            <summary>
            Loads the word list from a binary file at the default 
            "Assets/StreamingAssets" directory.
            </summary>    
        </member>
        <member name="M:Vuforia.WordListImpl.LoadWordListFile(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Loads the word list from a binary file at the specified path and storage
            location
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.LoadWordListFile(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Loads the word list from a binary file at the specified path and storage
            location
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.AddWordsFromFile(System.String)">
            <summary>
            Loads a set of custom words from a plain text file at the default 
            "Assets/StreamingAssets" directory.
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.AddWordsFromFile(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Loads a set of custom words from a plain text file at the specified 
            path and storage location
            The word list is extended with the custom words in the plain text file.
            No more than 10.000 custom words can be added to the word list. Each word
            must be between 2-45 characters in length. Returns the
            number of loaded custom words. The text file shall be encoded in UTF-8.
            </summary>
            <returns>Number of words that have been added</returns>
        </member>
        <member name="M:Vuforia.WordListImpl.AddWordsFromFile(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Loads a set of custom words from a plain text file at the specified 
            path and storage location
            The word list is extended with the custom words in the plain text file.
            No more than 10.000 custom words can be added to the word list. Each word
            must be between 2-45 characters in length. Returns the
            number of loaded custom words. The text file shall be encoded in UTF-8.
            </summary>
            <returns>Number of words that have been added</returns>
        </member>
        <member name="M:Vuforia.WordListImpl.AddWord(System.String)">
            <summary>
            Add a single custom word to the word list
            Use ContainsWord to check if the word is already in the word list prior
            to calling this.
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.RemoveWord(System.String)">
            <summary>
            Remove a custom word from the word list
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.ContainsWord(System.String)">
            <summary>
            Returns true if the given word is present in the WordList 
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.UnloadAllLists">
            <summary>
            Clears the word list as well as the filter list and releases resources.
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.GetFilterMode">
            <summary>
            Returns the filter mode
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.SetFilterMode(Vuforia.WordFilterMode)">
            <summary>
            Sets the mode for the filter list
            The filter list allows an application to specify a subset of Words
            from the word list that will be detected and tracked. It can do this
            in two modes of operation. In black list mode, any word in the filter
            list will be prevented from being detected. In the white list mode,
            only words in the the filter list can be detected.
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.LoadFilterListFile(System.String)">
            <summary>
            Loads the filter list from a plain text file at the default 
            "Assets/StreamingAssets" directory.
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.LoadFilterListFile(System.String,Vuforia.DataSet.StorageType)">
            <summary>
            Loads the filter list from a plain text file at the specified 
            path and storage location
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.LoadFilterListFile(System.String,Vuforia.QCARUnity.StorageType)">
            <summary>
            Loads the filter list from a plain text file at the specified 
            path and storage location
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.AddWordToFilterList(System.String)">
            <summary>
            Add a single word to the filter list 
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.RemoveWordFromFilterList(System.String)">
            <summary>
            Remove a word from the filter list 
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.ClearFilterList">
            <summary>
            Clear the filter list
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.GetFilterListWordCount">
            <summary>
            Query the number of words in the filter list
            </summary>
        </member>
        <member name="M:Vuforia.WordListImpl.GetFilterListWord(System.Int32)">
            <summary>
            Returns the ith element in the filter list
            </summary>
        </member>
        <member name="T:Vuforia.QCARNativeIosWrapper">
            <summary>
            This class encapsulates the access to native methods
            by implementing the IQCARWrapper interface
            </summary>
        </member>
        <member name="T:Vuforia.IQCARWrapper">
            <summary>
            This interface exposes access to all QCAR methods used by the
            Unity extension.
            </summary>
        </member>
        <member name="T:Vuforia.QCARNullWrapper">
            <summary>
            This is the null implementation for the IQCARWrapper interface.
            It is used for the free Untiy version that does nto support native plugins.
            </summary>
        </member>
        <member name="T:Vuforia.QCARNativeWrapper">
            <summary>
            This class encapsulates the access to native methods
            by implementing the IQCARWrapper interface
            </summary>
        </member>
        <member name="T:Vuforia.QCARWrapper">
            <summary>
            This class serves as a facade to the native QCARWrapper.
            Native methods are exposed in the IQCARWrapper interface.
            The 'Instance' singleton property will return either an implementation that provides native access,
            or a null implementation for the non-pro unity version that does not support native plugins.
            </summary>
        </member>
        <member name="M:Vuforia.QCARWrapper.SetImplementation(Vuforia.IQCARWrapper)">
            <summary>
            Forces the singleton to a specific interface implementation
            Mainly used for Unit Tests.
            </summary>
        </member>
        <member name="T:Vuforia.ISmartTerrainEventHandler">
            <summary>
            Interface for handling smart terrain updates
            </summary>
        </member>
        <member name="M:Vuforia.ISmartTerrainEventHandler.OnInitialized(Vuforia.SmartTerrainInitializationInfo)">
            <summary>
            Called when the smart terrain system has finished initializing
            </summary>
        </member>
        <member name="M:Vuforia.ISmartTerrainEventHandler.OnPropCreated(Vuforia.Prop)">
            <summary>
            Called when a smart terrain prop has been created
            </summary>
        </member>
        <member name="M:Vuforia.ISmartTerrainEventHandler.OnPropUpdated(Vuforia.Prop)">
            <summary>
            Called when the geometry of a smart terrain prop has been updated
            </summary>
        </member>
        <member name="M:Vuforia.ISmartTerrainEventHandler.OnPropDeleted(Vuforia.Prop)">
            <summary>
            Called when a smart terrain prop has been destroyed
            </summary>
        </member>
        <member name="M:Vuforia.ISmartTerrainEventHandler.OnSurfaceCreated(Vuforia.Surface)">
            <summary>
            Called when a surface has been created
            </summary>
        </member>
        <member name="M:Vuforia.ISmartTerrainEventHandler.OnSurfaceUpdated(Vuforia.SurfaceAbstractBehaviour)">
            <summary>
            Called when the geometry of a surface has been updated
            </summary>
        </member>
        <member name="T:Vuforia.ITextRecoEventHandler">
            <summary>
            Interface for handling newly detected and lost word results
            </summary>
        </member>
        <member name="M:Vuforia.ITextRecoEventHandler.OnInitialized">
            <summary>
            Called when the text reco system has finished initializing
            </summary>
        </member>
        <member name="M:Vuforia.ITextRecoEventHandler.OnWordDetected(Vuforia.WordResult)">
            <summary>
            Called when a new word has been detected.
            </summary>
            <param name="word">The newly detected word</param>
        </member>
        <member name="M:Vuforia.ITextRecoEventHandler.OnWordLost(Vuforia.Word)">
            <summary>
            Called when a word is not tracked anymore
            </summary>
        </member>
        <member name="T:Vuforia.IUserDefinedTargetEventHandler">
            <summary>
            An interface for handling User Defined Target building events.
            </summary>
        </member>
        <member name="M:Vuforia.IUserDefinedTargetEventHandler.OnInitialized">
            <summary>
            called when the UserDefinedTargetBehaviour has been initialized
            </summary>
        </member>
        <member name="M:Vuforia.IUserDefinedTargetEventHandler.OnFrameQualityChanged(Vuforia.ImageTargetBuilder.FrameQuality)">
            <summary>
            called when the UserDefinedTargetBehaviour reports a new frame Quality
            </summary>
        </member>
        <member name="M:Vuforia.IUserDefinedTargetEventHandler.OnNewTrackableSource(Vuforia.TrackableSource)">
            <summary>
            called when an error is reported during initialization
            </summary>
        </member>
        <member name="T:Vuforia.KeepAliveAbstractBehaviour">
            <summary>
            The KeepAliveBehaviour allows Vuforia objects to be reused across multiple
            scenes. This makes it possible to share datasets and targets between scenes.
            </summary>
        </member>
        <member name="M:Vuforia.KeepAliveAbstractBehaviour.RegisterEventHandler(Vuforia.ILoadLevelEventHandler)">
            <summary>
            Registers an event handler with this CloudRecoBehaviour which will be called on events
            </summary>
        </member>
        <member name="M:Vuforia.KeepAliveAbstractBehaviour.UnregisterEventHandler(Vuforia.ILoadLevelEventHandler)">
            <summary>
            Unregisters an event handler
            </summary>
        </member>
        <member name="M:Vuforia.KeepAliveAbstractBehaviour.OnLevelWasLoaded">
            <summary>
            This method will associate active datasets with new trackable behaviours when a new level is loaded
            </summary>
        </member>
        <member name="P:Vuforia.KeepAliveAbstractBehaviour.KeepARCameraAlive">
            <summary>
            If the ARCamera should be kept alive on scene change
            Changing this parameter at runtime is not supported.
            </summary>
        </member>
        <member name="P:Vuforia.KeepAliveAbstractBehaviour.KeepTrackableBehavioursAlive">
            <summary>
            If TrackableBehaviours should be kept alive on scene change
            Changing this parameter at runtime is not supported.
            </summary>
        </member>
        <member name="P:Vuforia.KeepAliveAbstractBehaviour.KeepTextRecoBehaviourAlive">
            <summary>
            If the Text Reco Prefab should be kept alive on scene change
            Changing this parameter at runtime is not supported.
            </summary>
        </member>
        <member name="P:Vuforia.KeepAliveAbstractBehaviour.KeepUDTBuildingBehaviourAlive">
            <summary>
            If the Text Reco Prefab should be kept alive on scene change
            Changing this parameter at runtime is not supported.
            </summary>
        </member>
        <member name="P:Vuforia.KeepAliveAbstractBehaviour.KeepSmartTerrainAlive">
            <summary>
            If the smart terrain object hierarchy should be kept alive on scene change
            Changing this parameter at runtime is not supported.
            </summary>
        </member>
        <member name="P:Vuforia.KeepAliveAbstractBehaviour.KeepCloudRecoBehaviourAlive">
            <summary>
            If the Text Reco Prefab should be kept alive on scene change
            Changing this parameter at runtime is not supported.
            </summary>
        </member>
        <member name="P:Vuforia.KeepAliveAbstractBehaviour.Instance">
            <summary>
            Provides singleton-like access to this MonoBehaviour 
            </summary>
        </member>
        <member name="T:Vuforia.ReconstructionAbstractBehaviour">
            <summary>
            This class represents a smart terrain reconstruction in Unity
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterSmartTerrainEventHandler(Vuforia.ISmartTerrainEventHandler)">
            <summary>
            This method registers a new SmartTerrain event handler.
            These handlers are called after all trackables have been updated for this frame.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterSmartTerrainEventHandler(Vuforia.ISmartTerrainEventHandler)">
            <summary>
            This method unregisters a SmartTerrain event handler.
            Returns "false" if event handler does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterInitializedCallback(System.Action{Vuforia.SmartTerrainInitializationInfo})">
            <summary>
            Registers a callback that is called when the reconstruction has been initialized
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterInitializedCallback(System.Action{Vuforia.SmartTerrainInitializationInfo})">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterPropCreatedCallback(System.Action{Vuforia.Prop})">
            <summary>
            Registers a callback that is called when a prop has been created.
            Use this to associate newly created props with templates.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterPropCreatedCallback(System.Action{Vuforia.Prop})">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterPropUpdatedCallback(System.Action{Vuforia.Prop})">
            <summary>
            Registers a callback that is called when the geometry of a prop has been updated
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterPropUpdatedCallback(System.Action{Vuforia.Prop})">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterPropDeletedCallback(System.Action{Vuforia.Prop})">
            <summary>
            Registers a callback that is called when a Prop has been destroyed
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterPropDeletedCallback(System.Action{Vuforia.Prop})">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterSurfaceCreatedCallback(System.Action{Vuforia.Surface})">
            <summary>
            Registers a callback that is called when a surface has been created.
            Use this to associate newly created surfaces with templates.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterSurfaceCreatedCallback(System.Action{Vuforia.Surface})">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterSurfaceUpdatedCallback(System.Action{Vuforia.Surface})">
            <summary>
            Registers a callback that is called when the geometry of a surface has been updated
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterSurfaceUpdatedCallback(System.Action{Vuforia.Surface})">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.RegisterSurfaceDeletedCallback(System.Action{Vuforia.Surface})">
            <summary>
            Registers a callback that is called when a surface has been deleted
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterSurfaceDeletedCallback(System.Action{Vuforia.Surface})">
            <summary>
            Unregisters a previously registered callback
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.AssociateProp(Vuforia.PropAbstractBehaviour,Vuforia.Prop)">
            <summary>
            Associate a Prop trackable with a behaviour. 
            The template PropBehaviour is duplicated and associated with the given prop
            Association will fail if the Prop has already been associated with another behaviour 
            or if the template is not a child object of the Reconstruction game object
            </summary>
            <returns>null if association was not successful</returns>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.AssociateSurface(Vuforia.SurfaceAbstractBehaviour,Vuforia.Surface)">
            <summary>
            Associate a Surface trackable with a behaviour. 
            The template SurfaceBehaviour is duplicated and associated with the given surface
            Association will fail if the Surface has already been associated with another behaviour 
            or if the template is not a child object of the Reconstruction game object
            </summary>
            <returns>null if association was not successful</returns>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.GetActiveProps">
            <summary>
            Returns all active Props
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.TryGetPropBehaviour(Vuforia.Prop,Vuforia.PropAbstractBehaviour@)">
            <summary>
            Get the behaviour that is associated with a currently tracked prop
            </summary>
            <param name="prop">trackable</param>
            <param name="behaviour">resulting behaviour, might be null if specified prop is not associated to a behaviour</param>
            <returns>returns true if behaviour exists for specified trackable</returns>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.GetActiveSurfaces">
            <summary>
            Returns all active Surfaces
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.TryGetSurfaceBehaviour(Vuforia.Surface,Vuforia.SurfaceAbstractBehaviour@)">
            <summary>
            Get the behaviour that is associated with a currently tracked surface
            </summary>
            <param name="surface">trackable</param>
            <param name="behaviour">resulting behaviour, might be null if specified surface is not associated to a behaviour</param>
            <returns>returns true if behaviour exists for specified trackable</returns>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UpdateSmartTerrainData(Vuforia.QCARManagerImpl.SmartTerrainRevisionData[],Vuforia.QCARManagerImpl.SurfaceData[],Vuforia.QCARManagerImpl.PropData[])">
            <summary>
            Update mesh of smart terrain if necessary
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.SetBehavioursToNotFound">
            <summary>
            Marks SmartTerrainBehaviour and all PropBehaviours as "not found"
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.InstantiatePropBehaviour(Vuforia.PropAbstractBehaviour)">
            <summary>
            create a new instance of the input prop behaviour
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.InstantiateSurfaceBehaviour(Vuforia.SurfaceAbstractBehaviour)">
            <summary>
            create a new instance of the input surface behaviour
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UpdateMesh(Vuforia.QCARManagerImpl.MeshData,UnityEngine.Mesh,System.Boolean)">
            <summary>
            Marshalling of specific mesh from QCARWRapper.
            Returns null if mesh cannot be retrieved.
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterDeletedProps(System.Collections.Generic.List{Vuforia.Prop})">
            <summary>
            Unregisters no longer existing Props in SmartTerrainManager and StateManager (as TrackableBehaviours),
            deletes the game objects
            </summary>
        </member>
        <member name="M:Vuforia.ReconstructionAbstractBehaviour.UnregisterDeletedSurfaces(System.Collections.Generic.List{Vuforia.Surface})">
            <summary>
            Unregisters no longer existing Surfaces in SmartTerrainManager and StateManager (as TrackableBehaviours),
            deletes the game objects
            </summary>
        </member>
        <member name="T:Vuforia.PropAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for a smart terrain prop in the editor
            as well as the reconstructed and tracked prop at runtime
            </summary>
        </member>
        <member name="M:Vuforia.PropAbstractBehaviour.UpdateMeshAndColliders">
            <summary>
            Updates the mesh based on the current prop trackable
            </summary>
        </member>
        <member name="M:Vuforia.PropAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="P:Vuforia.PropAbstractBehaviour.Prop">
            <summary>
            The prop trackable that this behaviour augments
            </summary>
        </member>
        <member name="T:Vuforia.StateManager">
            <summary>
            This class is used to manage the state of all TrackableBehaviours, create them,
            associate them with Trackables, update their pose, etc.
            </summary>
        </member>
        <member name="M:Vuforia.StateManager.GetActiveTrackableBehaviours">
            <summary>
            Returns the TrackableBehaviours currently being tracked
            </summary>
        </member>
        <member name="M:Vuforia.StateManager.GetTrackableBehaviours">
            <summary>
            Returns all currently instantiated TrackableBehaviours
            </summary>
        </member>
        <member name="M:Vuforia.StateManager.DestroyTrackableBehavioursForTrackable(Vuforia.Trackable,System.Boolean)">
            <summary>
            Destroys all the TrackableBehaviours for the given Trackable
            </summary>
        </member>
        <member name="M:Vuforia.StateManager.GetWordManager">
            <summary>
            Returns the word manager instance that can be used to access
            all currently tracked words from TextRecognition
            </summary>
        </member>
        <member name="T:Vuforia.StateManagerImpl">
            <summary>
            This class is used to manage the state of all TrackableBehaviours, create them,
            associate them with Trackables, update their pose, etc.
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.GetActiveTrackableBehaviours">
            <summary>
            Returns the TrackableBehaviours currently being tracked
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.GetTrackableBehaviours">
            <summary>
            Returns all currently instantiated TrackableBehaviours
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.GetWordManager">
            <summary>
            Returns the word manager which is used to access all currently tracked words
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.DestroyTrackableBehavioursForTrackable(Vuforia.Trackable,System.Boolean)">
            <summary>
            Destroys all the TrackableBehaviours for the given Trackable
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.AssociateMarkerBehaviours">
            <summary>
            Finds all MarkerBehaviours in the scene and associates them with existing Markers
            If a Marker does not exist yet, it is created in native.
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.AssociateTrackableBehavioursForDataSet(Vuforia.DataSet)">
            <summary>
            Finds DataSetTrackableBehaviours for this dataset and associates them with the Trackables in the DataSet.
            VirtualButtonBehaviours created in the scene are associated with the VirtualButtons in the DataSet or created there.
            
            If there is a Trackable in the DataSet where no TrackableBehaviour exists yet, this Behaviour is created, together with its VirtualButtons.
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.RegisterExternallyManagedTrackableBehaviour(Vuforia.TrackableBehaviour)">
            <summary>
            Adds an externally managed trackable behaviour (e.g. Smart Terrain) to the list of known trackables
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.UnregisterExternallyManagedTrackableBehaviour(System.Int32)">
            <summary>
            Removes an externally managed trackable behaviour (e.g. Smart Terrain) from the list of known trackables
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.RemoveDestroyedTrackables">
            <summary>
            Removes destroyed TrackableBehaviours from dictionary - called when a new level is loaded
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.ClearTrackableBehaviours">
            <summary>
            Clears the TrackableBehaviour dictionaries - called when QCARBehaviour is destroyed.
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.FindOrCreateImageTargetBehaviourForTrackable(Vuforia.ImageTarget,UnityEngine.GameObject)">
            <summary>
            Takes a given GameObject to add a new ImageTargetBehaviour to. This new Behaviour is associated with the given ImageTarget
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.FindOrCreateImageTargetBehaviourForTrackable(Vuforia.ImageTarget,UnityEngine.GameObject,Vuforia.DataSet)">
            <summary>
            Takes a given GameObject to add a new ImageTargetBehaviour to. This new Behaviour is associated with the given ImageTarget
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.CreateNewMarkerBehaviourForMarker(Vuforia.Marker,System.String)">
            <summary>
            Creates a new new, empty MarkerBehaviour for the given Marker
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.CreateNewMarkerBehaviourForMarker(Vuforia.Marker,UnityEngine.GameObject)">
            <summary>
            Takes a given GameObject to add a new MarkerBehaviour to. This new Behaviour is associated with the given Marker
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.SetTrackableBehavioursForTrackableToNotFound(Vuforia.Trackable)">
            <summary>
            Marks the TrackableBehaviours for the given Trackable as "not found"
            </summary>
        </member>
        <member name="M:Vuforia.StateManagerImpl.EnableTrackableBehavioursForTrackable(Vuforia.Trackable,System.Boolean)">
            <summary>
            Sets the enabled flag for TrackableBehaviours for a given Trackable
            </summary>
        </member>
        <member name="T:Vuforia.TargetFinderImpl">
            <summary>
            This class represents a service that retrieves targets using cloud-based recognition
            </summary>
        </member>
        <member name="T:Vuforia.TargetFinder">
            <summary>
            This class represents a service that retrieves targets using cloud-based recognition
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.StartInit(System.String,System.String)">
             <summary>
             Starts initialization of the cloud-based recognition system.
            
             Initialization of the cloud-based recognition system may take significant
             time and is thus handled in a background process. Use GetInitState() to
             query the initialization progress and result. Pass in the user/password
             for authenticating with the cloud reco server.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.GetInitState">
             <summary>
             Returns the current state of the initialization process
            
             Returns INIT_SUCCESS if the cloud-based recognition system was
             initialized successfully. Initialization requires a network connection
             to be available on the device, otherwise INIT_ERROR_NO_NETWORK_CONNECTION
             is returned. If the cloud-based recognition service is not available this
             function will return INIT_ERROR_SERVICE_NOT_AVAILABLE. Returns
             INIT_DEFAULT if initialization has not been started. Returns INIT_RUNNING
             if the initialization process has not completed.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.Deinit">
            <summary>
            Deinitializes the cloud-based recognition system
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.StartRecognition">
             <summary>
             Starts cloud recognition
            
             Starts continuous recognition of Targets from the cloud.
             Use updateSearchResult() and getResult() to retrieve search matches.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.Stop">
            <summary>
            Stops cloud recognition
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.SetUIScanlineColor(UnityEngine.Color)">
            <summary>
            Sets the base color of the scanline in the scanning UI
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.SetUIPointColor(UnityEngine.Color)">
            <summary>
            Sets the base color of the points in the scanning UI
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.IsRequesting">
             <summary>
             Returns true if the TargetFinder is in 'requesting' mode
            
             When in 'requesting' mode the TargetFinder has issued a search 
             query to the recognition server and is waiting for the results.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.Update">
             <summary>
             Update cloud reco results
            
             Clears and rebuilds the list of target search results with results found
             since the last call to updateSearchResults().
             Also refreshes the IsRequesting flag. 
             Returns the status code  UPDATE_RESULTS_AVAILABLE if new search results have been found.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.GetResults">
             <summary>
             Returns new search results
            
             Earlier search result instances are destroyed when UpdateSearchResults
             is called. 
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.EnableTracking(Vuforia.TargetFinder.TargetSearchResult,System.String)">
             <summary>
             Enable this search result for tracking
            
             Creates an ImageTarget for local detection and tracking of this target
             and returns a new ImageTargetBehaviour attached to a new game object with the given name.
             Note that this call may result in an earlier ImageTarget that was enabled for
             tracking to be destroyed, including its ImageTargetBehaviour. 
             Thus it is not advised to hold a pointer to an
             ealier created ImageTarget after calling enableTracking again. Returns
             NULL if the target failed to be enabled for tracking.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.EnableTracking(Vuforia.TargetFinder.TargetSearchResult,UnityEngine.GameObject)">
             <summary>
             Enable this search result for tracking
            
             Creates an ImageTarget for local detection and tracking of this target.
             If the given game object has no ImageTargetBehaviour, a new one will be created.
             Note that this call may result in an earlier ImageTarget that was enabled for
             tracking to be destroyed, including its ImageTargetBehaviour. 
             Thus it is not advised to hold a pointer to an
             ealier created ImageTarget after calling enableTracking again. Returns
             NULL if the target failed to be enabled for tracking.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.ClearTrackables(System.Boolean)">
             <summary>
             Clears all targets enabled for tracking
            
             Destroys all ImageTargets that have been created via EnableTracking().
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinder.GetImageTargets">
            <summary>
            Returns the ImageTargets currently enabled for tracking.
            </summary>
        </member>
        <member name="T:Vuforia.TargetFinder.InitState">
            <summary>
            Status codes returned by the init() function
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.InitState.INIT_RUNNING" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.InitState.INIT_SUCCESS" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.InitState.INIT_ERROR_NO_NETWORK_CONNECTION" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.InitState.INIT_ERROR_SERVICE_NOT_AVAILABLE" -->
        <member name="T:Vuforia.TargetFinder.UpdateState">
            <summary>
            Status codes returned by the updateSearchResults() function
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_NO_REQUEST" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_RESULTS_AVAILABLE" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_AUTHORIZATION_FAILED" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_PROJECT_SUSPENDED" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_NO_NETWORK_CONNECTION" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_SERVICE_NOT_AVAILABLE" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_BAD_FRAME_QUALITY" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_UPDATE_SDK" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_TIMESTAMP_OUT_OF_RANGE" -->
        <!-- Badly formed XML comment ignored for member "F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_REQUEST_TIMEOUT" -->
        <member name="T:Vuforia.TargetFinder.TargetSearchResult">
            <summary>
            This struct contains all known data of a specific search result
            </summary>
        </member>
        <member name="F:Vuforia.TargetFinder.TargetSearchResult.TargetSize">
            width of the target (in 3D scene units)
        </member>
        <member name="F:Vuforia.TargetFinder.TargetSearchResult.TrackingRating">
            The tracking rating represents a 5-star rating describing the
            suitability of this target for tracking on a scale from 0 to 5. A low
            tracking rating may result in poor tracking or unstable augmentation.
        </member>
        <member name="M:Vuforia.TargetFinderImpl.StartInit(System.String,System.String)">
             <summary>
             Starts initialization of the cloud-based recognition system.
            
             Initialization of the cloud-based recognition system may take significant
             time and is thus handled in a background process. Use GetInitState() to
             query the initialization progress and result. Pass in the user/password
             for authenticating with the cloud reco server.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.GetInitState">
             <summary>
             Returns the current state of the initialization process
            
             Returns INIT_SUCCESS if the cloud-based recognition system was
             initialized successfully. Initialization requires a network connection
             to be available on the device, otherwise INIT_ERROR_NO_NETWORK_CONNECTION
             is returned. If the cloud-based recognition service is not available this
             function will return INIT_ERROR_SERVICE_NOT_AVAILABLE. Returns
             INIT_DEFAULT if initialization has not been started. Returns INIT_RUNNING
             if the initialization process has not completed.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.Deinit">
            <summary>
            Deinitializes the cloud-based recognition system
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.StartRecognition">
             <summary>
             Starts cloud recognition
            
             Starts continuous recognition of Targets from the cloud.
             Use updateSearchResult() and getResult() to retrieve search matches.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.Stop">
            <summary>
            Stops cloud recognition
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.SetUIScanlineColor(UnityEngine.Color)">
            <summary>
            Sets the base color of the scanline in the scanning UI
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.SetUIPointColor(UnityEngine.Color)">
            <summary>
            Sets the base color of the points in the scanning UI
            </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.IsRequesting">
             <summary>
             Returns true if the TargetFinder is in 'requesting' mode
            
             When in 'requesting' mode the TargetFinder has issued a search 
             query to the recognition server and is waiting for the results.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.Update">
             <summary>
             Update cloud reco results
            
             Clears and rebuilds the list of target search results with results found
             since the last call to updateSearchResults().
             Also refreshes the IsRequesting flag. 
             Returns the status code  UPDATE_RESULTS_AVAILABLE if new search results have been found.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.GetResults">
             <summary>
             Returns new search results
            
             Earlier search result instances are destroyed when UpdateSearchResults
             is called. 
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.EnableTracking(Vuforia.TargetFinder.TargetSearchResult,System.String)">
             <summary>
             Enable this search result for tracking
            
             Creates an ImageTarget for local detection and tracking of this target
             and returns a new ImageTargetBehaviour attached to a new game object with the given name.
             Note that this call may result in an earlier ImageTarget that was enabled for
             tracking to be destroyed, including its ImageTargetBehaviour. 
             Thus it is not advised to hold a pointer to an
             ealier created ImageTarget after calling enableTracking again. Returns
             NULL if the target failed to be enabled for tracking.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.EnableTracking(Vuforia.TargetFinder.TargetSearchResult,UnityEngine.GameObject)">
             <summary>
             Enable this search result for tracking
            
             Creates an ImageTarget for local detection and tracking of this target.
             If the given game object has no ImageTargetBehaviour, a new one will be created.
             Note that this call may result in an earlier ImageTarget that was enabled for
             tracking to be destroyed, including its ImageTargetBehaviour. 
             Thus it is not advised to hold a pointer to an
             ealier created ImageTarget after calling enableTracking again. Returns
             NULL if the target failed to be enabled for tracking.
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.ClearTrackables(System.Boolean)">
             <summary>
             Clears all targets enabled for tracking
            
             Destroys all ImageTargets that have been created via EnableTracking().
             </summary>
        </member>
        <member name="M:Vuforia.TargetFinderImpl.GetImageTargets">
            <summary>
            Returns the ImageTargets currently enabled for tracking.
            </summary>
        </member>
        <member name="T:Vuforia.TargetFinderImpl.TargetFinderState">
            <summary>
            This struct stores the state of the ImageTargetBuilder, including the mode, build progress and frame quality in search mode.
            </summary>
        </member>
        <member name="T:Vuforia.TargetFinderImpl.InternalTargetSearchResult">
            <summary>
            This struct describes a new search result. If the new target cannot be tracked, TrackableSource will be null.
            </summary>
        </member>
        <member name="T:Vuforia.TrackableSource">
            <summary>
            An opaque handle for creating a new Trackable in a DataSet.
            </summary>
        </member>
        <member name="T:Vuforia.TextureRenderer">
            <summary>
            Helper class that renders a given texture into a RenderTexture on demand.
            Used to buffer frames coming from the web cam stream
            </summary>
        </member>
        <member name="T:Vuforia.TrackerManager">
            <summary>
            This class serves as a singleton to retrieve the Trackers and the StateManager
            </summary>
        </member>
        <member name="M:Vuforia.TrackerManager.GetTracker``1">
            <summary>
            Returns the instance of the given tracker type
            See the Tracker base class for a list of available tracker classes.
            This function will return null if the tracker of the given type has
            not been initialized.
            </summary>
        </member>
        <member name="M:Vuforia.TrackerManager.InitTracker``1">
            <summary>
            Initializes the tracker of the given type
            Initializing a tracker must not be done when the CameraDevice
            is initialized or started. This function will return null if the
            CameraDevice is currently initialized.
            </summary>
        </member>
        <member name="M:Vuforia.TrackerManager.DeinitTracker``1">
            <summary>
            Deinitializes the tracker of the given type and frees any resources
            used by the tracker.
            Deinitializing a tracker must not be done when the CameraDevice
            is initialized or started. This function will return false if the
            tracker of the given type has not been initialized or if the
            CameraDevice is currently initialized.
            </summary>
        </member>
        <member name="M:Vuforia.TrackerManager.GetStateManager">
            <summary>
            Returns the state manager instance that can be used to access
            all currently tracked TrackableBehaviours
            </summary>
        </member>
        <member name="P:Vuforia.TrackerManager.Instance">
            <summary>
            Returns an instance of a TrackerManager (thread safe)
            </summary>
        </member>
        <member name="T:Vuforia.VirtualButton">
             <summary>
             A virtual button on a trackable
            
             Methods to modify a VirtualButton must not be called while the
             corresponding DataSet is active. The dataset must be deactivated first
             before reconfiguring a VirtualButton.
             </summary>
        </member>
        <member name="F:Vuforia.VirtualButton.DEFAULT_SENSITIVITY">
            <summary>
            The standard sensitivity
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButton.SetArea(Vuforia.RectangleData)">
             <summary>
             Defines a new area for the button area in 3D scene units (the
             coordinate system is local to the ImageTarget).
            
             This method must not be called while the corresponding DataSet is
             active or it will return false.
             </summary>
        </member>
        <member name="M:Vuforia.VirtualButton.SetSensitivity(Vuforia.VirtualButton.Sensitivity)">
             <summary>
             Sets the sensitivity of the virtual button
            
             Sensitivity allows deciding between fast and robust button press
             measurements. This method must not be called while the corresponding
             DataSet is active or it will return false.
             </summary>
        </member>
        <member name="M:Vuforia.VirtualButton.SetEnabled(System.Boolean)">
             <summary>
             Enables or disables a virtual button
            
             This method must not be called while the corresponding DataSet is
             active or it will return false.
             </summary>
        </member>
        <member name="P:Vuforia.VirtualButton.Name">
            <summary>
            Returns the name of the button
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButton.ID">
            <summary>
            Returns a unique id for this virtual button.
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButton.Enabled">
            <summary>
            Returns true if the virtual button is active (updates while tracking).
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButton.Area">
            <summary>
            Returns the currently set Area
            </summary>
        </member>
        <member name="T:Vuforia.VirtualButton.Sensitivity">
            <summary>
            The sensitivity of this virtual button. This is a trade off between fast
            detection and robustness again accidental occlusion.
            </summary>
        </member>
        <member name="M:Vuforia.WebCamImpl.ComputeResampledTextureSize">
            <summary>
            Computes the new resampled texture size depending on the configured width and the aspect of the actual web cam texture
            </summary>
        </member>
        <member name="M:Vuforia.WebCamImpl.RenderFrame(System.Int32)">
            <summary>
            renders the given texture in the background, either itself or into a texture that was set to receive it
            </summary>
        </member>
        <member name="T:Vuforia.WebCamProfile">
            <summary>
            This class loads a xml file from the streamingassets folder that contains
            information about the webcamera that is used in the emulator
            Most of the code is excluded via ifdefs outside of the editor to avoid
            importing larger Mono libraries for XML parsing when build for a mobile device
            </summary>
        </member>
        <member name="M:Vuforia.WebCamProfile.GetProfile(System.String)">
            <summary>
            Returns the profile data for the given webcam model.
            If none is found, the default profile will be returned.
            </summary>
        </member>
        <member name="M:Vuforia.WebCamProfile.ProfileAvailable(System.String)">
            <summary>
            Returns true if a profile for the given webcam exists
            </summary>
        </member>
        <member name="T:Vuforia.ITrackableEventHandler">
            <summary>
            Interface for handling trackable state changes.
            </summary>
        </member>
        <member name="M:Vuforia.ITrackableEventHandler.OnTrackableStateChanged(Vuforia.TrackableBehaviour.Status,Vuforia.TrackableBehaviour.Status)">
            <summary>
            Called when the trackable state has changed.
            </summary>
        </member>
        <member name="T:Vuforia.ITrackerEventHandler">
            <summary>
            Interface for handling tracker events.
            </summary>
        </member>
        <member name="M:Vuforia.ITrackerEventHandler.OnInitialized">
            <summary>
            Called after QCAR has finished initializing and the Trackers and Camera has been started.
            </summary>
        </member>
        <member name="M:Vuforia.ITrackerEventHandler.OnTrackablesUpdated">
            <summary>
            Called after all the trackable objects have been updated
            </summary>
        </member>
        <member name="T:Vuforia.IVirtualButtonEventHandler">
            <summary>
            An interface for handling virtual button state changes.
            </summary>
        </member>
        <member name="M:Vuforia.IVirtualButtonEventHandler.OnButtonPressed(Vuforia.VirtualButtonAbstractBehaviour)">
            <summary>
            Called when the virtual button has just been pressed.
            </summary>
        </member>
        <member name="M:Vuforia.IVirtualButtonEventHandler.OnButtonReleased(Vuforia.VirtualButtonAbstractBehaviour)">
            <summary>
            Called when the virtual button has just been released.
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for an ImageTarget in the editor
            as well as a tracked image target result at runtime
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.CorrectScaleImpl">
            <summary>
            Scales the Trackable uniformly
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.CreateVirtualButton(System.String,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            This method creates a Virtual Button and adds it to this Image Target as
            a direct child.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.CreateVirtualButton(System.String,UnityEngine.Vector2,UnityEngine.GameObject)">
            <summary>
            This methods adds the Virtual Button as a child of "immediateParent".
            Returns null if "immediateParent" is not an Image Target or a child of an
            Image Target.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.GetVirtualButtonBehaviours">
            <summary>
             Returns the virtual button behaviours for this imageTargetBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.DestroyVirtualButton(System.String)">
            <summary>
            Destroys the virtual button with the given name.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.GetSize">
            <summary>
            Returns the size of this target in scene units
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.SetWidth(System.Single)">
            <summary>
            Set the width (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.SetHeight(System.Single)">
            <summary>
            Set the height (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetAbstractBehaviour.Vuforia#IEditorImageTargetBehaviour#AssociateExistingVirtualButtonBehaviour(Vuforia.VirtualButtonAbstractBehaviour)">
            <summary>
            Associates existing virtual button behaviour with virtualbuttons and creates new VirtualButtons if necessary
            </summary>
        </member>
        <member name="P:Vuforia.ImageTargetAbstractBehaviour.ImageTarget">
            <summary>
            The image target that this ImageTargetBehaviour augments
            </summary>
        </member>
        <member name="T:Vuforia.MarkerAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for a Marker in the editor
            as well as a tracked marker result at runtime
            </summary>
        </member>
        <member name="M:Vuforia.MarkerAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="M:Vuforia.MarkerAbstractBehaviour.CorrectScaleImpl">
            <summary>
            Scales the Trackable uniformly
            </summary>
        </member>
        <member name="P:Vuforia.MarkerAbstractBehaviour.Marker">
            <summary>
            The Marker that this MarkerBehaviour augments
            </summary>
        </member>
        <member name="T:Vuforia.MaskOutAbstractBehaviour">
            <summary>
            Helper behaviour used to hide augmented objects behind the video background.
            </summary>
        </member>
        <member name="T:Vuforia.MultiTargetAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for a MultiTarget in the editor
            as well as a tracked MultiTarget result at runtime
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from it's associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="P:Vuforia.MultiTargetAbstractBehaviour.MultiTarget">
            <summary>
            The MultiTarget that this MultiTargetBehaviour augments
            </summary>
        </member>
        <member name="T:Vuforia.QCARUnity">
            <summary>
            A static utility class that exposes helper functions from QCAR
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.Deinit">
            <summary>
            Deinitializes Vuforia
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.IsRendererDirty">
            <summary>
            Checks if the GL surface has changed
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.SetHint(Vuforia.QCARUnity.QCARHint,System.Int32)">
            <summary>
            Sets a hint for the QCAR SDK
            Hints help the SDK to understand the developer's needs.
            However, depending on the device or SDK version the hints
            might not be taken into consideration.
            Returns false if the hint is unknown or deprecated.
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.SetHint(System.Int32,System.Int32)">
            <summary>
            Sets a hint for the QCAR SDK
            Hints help the SDK to understand the developer's needs.
            However, depending on the device or SDK version the hints
            might not be taken into consideration.
            Returns false if the hint is unknown or deprecated.
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.GetProjectionGL(System.Single,System.Single,UnityEngine.ScreenOrientation)">
            <summary>
            Returns the QCAR projection matrix
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.OnPause">
            <summary>
            Executes AR-specific tasks upon pausing the Unity application
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.OnResume">
            <summary>
            Executes AR-specific tasks upon resuming the Unity application
            </summary>
        </member>
        <member name="M:Vuforia.QCARUnity.SetRendererDirty">
            <summary>
            Raises a flag that the rendering functionality needs to be reconfigured
            e.g. when the projection matrix of the camera was changed externally.
            </summary>
        </member>
        <member name="T:Vuforia.QCARUnity.InitError">
            <summary>
            InitError is an error value that is returned by QCAR if something goes
            wrong at initialization.
            </summary>
        </member>
        <member name="T:Vuforia.QCARUnity.QCARHint">
            <summary>
            Hints are used to push the tracker into certain behavior. Hints (as the
            name suggests) are not always guaranteed to work.
            </summary>
        </member>
        <member name="T:Vuforia.QCARUnity.StorageType">
            <summary>
            Storage type is used to interpret a given path string.
            </summary>
        </member>
        <member name="T:Vuforia.QCARAbstractBehaviour">
            <summary>
            The QCARBehaviour class handles tracking and triggers native video
            background rendering. The class updates all Trackables in the scene.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.SetAutoAdjustStereoCameraSkewing(System.Boolean)">
            <summary>
            This method is used to toggle the automatic skewing setting for the stereo camera projections
            to align the video background with the closest trackable in view. 
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.SetSceneScaleFactor(System.Single)">
            <summary>
            This method is used to set the scaling factor for scene rendering.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterQCARInitErrorCallback(System.Action{Vuforia.QCARUnity.InitError})">
            <summary>
            Register for a callback that is invoked if QCAR initialization fails.
            More than one callback can be registered.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterQCARInitErrorCallback(System.Action{Vuforia.QCARUnity.InitError})">
            <summary>
            Unregister a previously registered callback.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterQCARInitializedCallback(System.Action)">
            <summary>
            Register for a callback that is invoked after QCAR has initialized and before the camera has started.
            Should be called from an Awake() method to not miss the exact callback time between the two.
            More than one callback can be registered.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterQCARInitializedCallback(System.Action)">
            <summary>
            Unregister a previously registered callback.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterQCARStartedCallback(System.Action)">
            <summary>
            Register for a callback that is invoked after QCAR has completely started, including camera and trackers.
            More than one callback can be registered.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterQCARStartedCallback(System.Action)">
            <summary>
            Unregister a previously registered callback.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterTrackablesUpdatedCallback(System.Action)">
            <summary>
            Register for a callback that is invoked if QCAR initialization fails.
            More than one callback can be registered.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterTrackablesUpdatedCallback(System.Action)">
            <summary>
            Unregister a previously registered callback.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterOnPauseCallback(System.Action{System.Boolean})">
            <summary>
            Register for a callback that is invoked before QCAR is pausing when the application is paused, 
            and after QCAR resumes when the applicaiton resumes. This can be used e.g. for restoring
            a focus mode after an applicaiton pause.
            More than one callback can be registered.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterOnPauseCallback(System.Action{System.Boolean})">
            <summary>
            Unregister a previously registered callback.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.SetEditorValues(System.Single)">
            <summary>
            This method registers a new Tracker event handler.
            This method is used to set the values of unity editor fields.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterTrackerEventHandler(Vuforia.ITrackerEventHandler)">
            <summary>
            This method registers a new Tracker event handler at the Tracker.
            These handlers are called as soon as ALL Trackables have been updated
            in this frame.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterTrackerEventHandler(Vuforia.ITrackerEventHandler)">
            <summary>
            This method unregisters a Tracker event handler.
            Returns "false" if event handler does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterVideoBgEventHandler(Vuforia.IVideoBackgroundEventHandler)">
            <summary>
            This method registers a new video background event handler at the Tracker.
            These handlers are called as soon as the video background config has changed
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterVideoBgEventHandler(Vuforia.IVideoBackgroundEventHandler)">
            <summary>
            This method unregisters a video background event handler.
            Returns "false" if event handler does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.SetWorldCenterMode(Vuforia.QCARAbstractBehaviour.WorldCenterMode)">
            <summary>
            This method is used to set the world center mode in the Unity editor.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.SetWorldCenter(Vuforia.TrackableBehaviour)">
            <summary>
            This method is used to set the world center in the Unity editor in
            "USER" mode.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.SetAppLicenseKey(System.String)">
            <summary>
            This method is used to set the Vuforia License key in an 
            Awake() method before the Vuforia SDK is initalized.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.GetViewportRectangle">
            <summary>
            This method simply returns the viewport rectangle.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.GetSurfaceOrientation">
            <summary>
            This method returns the surface orientation.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.ConfigureVideoBackground(System.Boolean)">
            <summary>
            Configure the size and position of the video background rendered
            natively when QCARManager.DrawVideoBackground is true
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.ResetBackgroundPlane(System.Boolean)">
            <summary>
            This method resets the number of frames for which the color buffer 
            needs to be cleared.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RequestDeinitTrackerNextFrame``1">
            <summary>
            Can be called to request deinitialization of a tracker in the next frame
            This deinitialization will not happen if the QCARBehaviour is destroyed as well and 
            deinits this tracker in the process.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.RegisterRenderOnUpdateCallback(System.Action)">
            <summary>
            Register for a callback that is invoked if after QCARManager.Update has returned and it's a good time to render.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UnregisterRenderOnUpdateCallback(System.Action)">
            <summary>
            Unregister a previously registered callback.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.SetUnityPlayerImplementation(Vuforia.IUnityPlayer)">
            <summary>
            Sets the internal UnityPlayer implementation
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.StartQCAR(System.Boolean,System.Boolean)">
            <summary>
            Start the camera and trackers and update the camera projection
            return false if the camera or trackers can't be initialized, started or configured.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.StopQCAR">
            <summary>
            Stop the trackers, stop and deinit the camera
            return false if the trackers or the camera can't be stopped or deinitialized
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.UpdateStereoDepth">
            <summary>
            sets a new stereo depth for the video background behaviours
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.ProjectionMatricesUpdated">
            <summary>
            Notifies the VideoBackgroundAbstractBehaviours that the project matrix has been 
            updated and needs to be skewed again.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.ApplyMatrix(UnityEngine.Camera,UnityEngine.Matrix4x4)">
            <summary>
            Applies view port corrected projection matrix to a camera.
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.DeinitRequestedTrackers">
            <summary>
            This method deinits trackes that other classes (e.g. SmartTerrainTrackerBehaviour) have requested to be deinitialized
            </summary>
        </member>
        <member name="M:Vuforia.QCARAbstractBehaviour.CheckForSurfaceChanges">
            <summary>
            check if the surface size changed
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.AutoAdjustStereoCameraSkewing">
            <summary>
            This property is used to read the automatic skewing setting for the stereo camera projections
            to align the video background with the closest trackable in view.
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.SceneScaleFactor">
            <summary>
            This property is used to set scale for scene rendering.
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.CameraOffset">
            <summary>
            This property is used for configuring camera offset for IPD.
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.WorldCenterModeSetting">
            <summary>
            This property is used to query the active world center mode.
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.WorldCenter">
            <summary>
            This property is used to query the world center Trackable
            (will return null in "NONE" mode).
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.VideoBackGroundMirrored">
            <summary>
            This property is used to query if the video background is mirrored
            If true, Backface Culling is automatically reverted.
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.CameraDeviceMode">
            <summary>
            This property is used to query the currently set camera device mode
            (DEFAULT, SPEED or QUALITY)
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.HasStarted">
            <summary>
            If QCAR has started successfully
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.IsStereoRendering">
            <summary>
            If Stereo redering is on
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.PrimaryCamera">
            <summary>
            This property is used for configure primary camera.
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.SecondaryCamera">
            <summary>
            This property is used for configure secondary camera.
            </summary>
        </member>
        <member name="P:Vuforia.QCARAbstractBehaviour.AppLicenseKey">
            <summary>
            The license key that is used for this app
            </summary>
        </member>
        <member name="T:Vuforia.QCARAbstractBehaviour.WorldCenterMode">
            <summary>
            The world center mode defines how the relative coordinates between
            Trackables and camera are translated into Unity world coordinates.
            If a world center is present the virtual camera in the Unity scene is
            transformed with respect to that.
            The world center mode is set through the Unity inspector.
            </summary>
        </member>
        <member name="T:Vuforia.QCARRuntimeUtilities">
            <summary>
            A utility class containing various helper methods
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.StripFileNameFromPath(System.String)">
            <summary>
            Returns the file name without the path.
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.StripExtensionFromPath(System.String)">
            <summary>
            Returns the extension without the path.
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.ForceDisableTrackables">
            <summary>
            Disables all TrackableBehaviours. Used when an GL or orientation error is detected in a sample.
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.IsPlayMode">
            <summary>
            returns ONLY true if we are running in Play Mode
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.IsQCAREnabled">
            <summary>
            returns true if we have access to QCAR (on a mobile device OR in the emulator in Unity Pro with a webcam connected)
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.ScreenSpaceToCameraFrameCoordinates(UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,Vuforia.CameraDevice.VideoModeData)">
            <summary>
            Calculates a position in camera frame coordinates based on the current orientation and background config for a given screen-space position
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.CameraFrameToScreenSpaceCoordinates(UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,Vuforia.CameraDevice.VideoModeData)">
            <summary>
            Calculates a position in screen space coordinates based on the current orientation and background config for a given screen-space position
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.CameraFrameToScreenSpaceCoordinates(Vuforia.OrientedBoundingBox,UnityEngine.Rect,System.Boolean,Vuforia.CameraDevice.VideoModeData)">
            <summary>
            Calculates the screen space parameters for an oriented bounding box (center, half extents, rotation) specified in camera frame coordinates.
            The calculation is based on the current screen orientation.
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.SelectRectTopLeftAndBottomRightForLandscapeLeft(UnityEngine.Rect,System.Boolean,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Selects the top left and bottom right corners from a rect, where "top", "left", "bottom" and "right" are in respect to landscape left orientation
            Used for region of interest calculations for text tracking
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.CalculateRectFromLandscapeLeftCorners(UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Creates a rect from given corner points, where "top", "left", "bottom" and "right" are in respect to landscape left orientation
            Used for region of interest calculations for text tracking
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.DisableSleepMode">
            <summary>
            The device screen stays turned on and bright 
            </summary>
        </member>
        <member name="M:Vuforia.QCARRuntimeUtilities.ResetSleepMode">
            <summary>
            Reset the sleep mode to the system settings.
            </summary>
        </member>
        <member name="P:Vuforia.QCARRuntimeUtilities.ScreenOrientation">
            <summary>
            Wrapper for Screen.orientation to enable correct handling in Editor
            and on devices that do not support all orientations.
            </summary>
        </member>
        <member name="P:Vuforia.QCARRuntimeUtilities.IsLandscapeOrientation">
            <summary>
            returns true of ScreenOrientation is in ANY landscape mode
            </summary>
        </member>
        <member name="P:Vuforia.QCARRuntimeUtilities.IsPortraitOrientation">
            <summary>
            returns true if ScreenOrientation is in ANY portrait mode
            </summary>
        </member>
        <member name="T:Vuforia.SurfaceUtilities">
            <summary>
            This class publicly exposes native methods that are related to surface management.
            These methods are used by the Unity Extension and usually should not be used in application code.
            </summary>
        </member>
        <member name="M:Vuforia.SurfaceUtilities.OnSurfaceCreated">
            <summary>
            Signals native that the rendering surface has been created by Unity
            </summary>
        </member>
        <member name="M:Vuforia.SurfaceUtilities.OnSurfaceDeinit">
            <summary>
            Signals native that the rendering surface should be deinitialized
            </summary>
        </member>
        <member name="M:Vuforia.SurfaceUtilities.HasSurfaceBeenRecreated">
            <summary>
            Checks if the GLSurface has been recreated
            </summary>
        </member>
        <member name="M:Vuforia.SurfaceUtilities.OnSurfaceChanged(System.Int32,System.Int32)">
            <summary>
            Signals native that the screen size has changed (device rotation)
            </summary>
        </member>
        <member name="M:Vuforia.SurfaceUtilities.SetSurfaceOrientation(UnityEngine.ScreenOrientation)">
            <summary>
            Sets a new orientation
            </summary>
        </member>
        <member name="M:Vuforia.SurfaceUtilities.GetSurfaceOrientation">
            <summary>
            Gets the current  orientation
            </summary>
        </member>
        <member name="T:Vuforia.TextRecoAbstractBehaviour">
            <summary>
            This is the main behaviour class that encapsulates text recognition behaviour.
            It just has to be added to a Vuforia-enabled Unity scene and will initialize the text tracker with the configured word list.
            Events for newly recognized or lost words will be called on registered ITextRecoEventHandlers
            </summary> 
        </member>
        <member name="M:Vuforia.TextRecoAbstractBehaviour.RegisterTextRecoEventHandler(Vuforia.ITextRecoEventHandler)">
            <summary>
            This method registers a new TextReco event handler.
            These handlers are called after all trackables have been updated for this frame.
            </summary>
        </member>
        <member name="M:Vuforia.TextRecoAbstractBehaviour.UnregisterTextRecoEventHandler(Vuforia.ITextRecoEventHandler)">
            <summary>
            This method unregisters a TextReco event handler.
            Returns "false" if event handler does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.TextRecoAbstractBehaviour.SetupWordList">
            <summary>
            Setup word list, custom word list, and filter list based on information from editor inspector
            </summary>
        </member>
        <member name="M:Vuforia.TextRecoAbstractBehaviour.NotifyEventHandlersOfChanges(System.Collections.Generic.IEnumerable{Vuforia.Word},System.Collections.Generic.IEnumerable{Vuforia.WordResult})">
            <summary>
            Notifies all registered text reco event handlers about new and lost words
            </summary>
        </member>
        <member name="M:Vuforia.TextRecoAbstractBehaviour.OnTrackablesUpdated">
            <summary>
            This method is called after all trackables have been updated
            </summary>
        </member>
        <member name="T:Vuforia.SimpleTargetData">
            <summary>
            the most basic data of a trackabe
            </summary>
        </member>
        <member name="T:Vuforia.TurnOffAbstractBehaviour">
            <summary>
            A utility behaviour to disable rendering of a game object at run time.
            </summary>
        </member>
        <member name="T:Vuforia.UserDefinedTargetBuildingAbstractBehaviour">
            <summary>
            This Component can be used to create new ImageTargets at runtime. It can be configured to start scanning automatically
            or via a call from an external script.
            Registered event handlers will be informed of changes in the frame quality as well as new TrackableSources
            </summary>
        </member>
        <member name="F:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.StopTrackerWhileScanning">
            <summary>
            if the tracker should be stopped when scanning is started and resumed when scanning is stopped
            </summary>
        </member>
        <member name="F:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.StartScanningAutomatically">
            <summary>
            if this is set to true, scanning will start automatically when this component is activated
            </summary>
        </member>
        <member name="F:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.StopScanningWhenFinshedBuilding">
            <summary>
            if scanning should be stopped automatically when a new target is built
            </summary>
        </member>
        <member name="M:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.RegisterEventHandler(Vuforia.IUserDefinedTargetEventHandler)">
            <summary>
            Registers an event handler with this UserDefinedTargetBuildingBehaviour which will be called on events
            </summary>
        </member>
        <member name="M:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.UnregisterEventHandler(Vuforia.IUserDefinedTargetEventHandler)">
            <summary>
            Unregisters an event handler
            </summary>
        </member>
        <member name="M:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.StartScanning">
            <summary>
            Starts scanning the current camera image for features. 
            This will trigger callbacks to the registered event handlers whenever the
            frame quality changes.
            If 'StopTrackerWhileScanning' is set, this will stop the ObjectTracker
            </summary>
        </member>
        <member name="M:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.BuildNewTarget(System.String,System.Single)">
            <summary>
            This will start building a new target and report back to the event handlers as soon
            as a new TrackableSource is available.
            </summary>
        </member>
        <member name="M:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.StopScanning">
            <summary>
            Stops scanning, event handlers will be informed.
            If 'StopTrackerWhileScanning' is set, this will resume the ObjectTracker
            </summary>
        </member>
        <member name="M:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.OnDestroy">
            <summary>
            When this game object is destroyed, the class unregisters itself as event handler
            </summary>
        </member>
        <member name="M:Vuforia.UserDefinedTargetBuildingAbstractBehaviour.OnQCARStarted">
            <summary>
            Initialize after QCAR has started
            </summary>
        </member>
        <member name="T:Vuforia.VideoBackgroundAbstractBehaviour">
            <summary>
            The VideoBackgroundBehaviour class handles native video background rendering.
            </summary>
        </member>
        <member name="M:Vuforia.VideoBackgroundAbstractBehaviour.ResetBackgroundPlane(System.Boolean)">
            <summary>
            This method toggles the mesh renderer of the background plane
            </summary>
        </member>
        <member name="M:Vuforia.VideoBackgroundAbstractBehaviour.SetStereoDepth(System.Single)">
            <summary>
            Adjusts camera projection matrix and Background plane depth to correct stereoscopic rendering.
            Is called automatically by the QCARBehaviour, but can be called from app logic to override.
            </summary>
        </member>
        <member name="M:Vuforia.VideoBackgroundAbstractBehaviour.ApplyStereoDepthToMatrices">
            <summary>
            Let the VideoBackgroundBehaviour know that the camera matrix or stereo depth has been updated
            and the frustum skewing needs to be re-applied.
            Is called automatically by the QCARBehaviour, but can be called from app logic to override.
            </summary>
        </member>
        <member name="M:Vuforia.VideoBackgroundAbstractBehaviour.RenderOnUpdate">
            <summary>
            Called from QCARBehaviour.Update after updating the QCAR state.
            Will automatically bind the video background if the state has changed.
            </summary>
        </member>
        <member name="P:Vuforia.VideoBackgroundAbstractBehaviour.VideoBackGroundMirrored">
            <summary>
            This property is used to query if the video background is mirrored
            If true, Backface Culling is automatically reverted.
            </summary>
        </member>
        <member name="T:Vuforia.VideoTextureRendererAbstractBehaviour">
            <summary>
            The VideoTextrueRendererAbstractBehaviour class handles video rendering via BTA.
            It creates a texture and pass it to naative code for video rendering.
            </summary>
        </member>
        <member name="M:Vuforia.VideoTextureRendererAbstractBehaviour.OnVideoBackgroundConfigChanged">
            <summary>
            reset the video background
            </summary>
        </member>
        <member name="T:Vuforia.VirtualButtonAbstractBehaviour">
            <summary>
            This behaviour associates a Virtual Button with a game object. Use the
            functionality in ImageTargetBehaviour to create and destroy Virtual Buttons
            at run-time.
            </summary>
        </member>
        <member name="F:Vuforia.VirtualButtonAbstractBehaviour.TARGET_OFFSET">
            <summary>
            The vertical offset of the graphic representation of a virtual button in respect to the target
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.RegisterEventHandler(Vuforia.IVirtualButtonEventHandler)">
            <summary>
            Registers an event handler with this Virtual Button which will be called
            when a state changed is detected.
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.UnregisterEventHandler(Vuforia.IVirtualButtonEventHandler)">
            <summary>
            Registers an event handler with this Virtual Button which will be called
            when a state changed is detected.
            Returns true on success. False otherwise.
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.CalculateButtonArea(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Calculates the 2D button area that the Virtual Button currently occupies
            in the Image Target.
            Returns true if the area was computed successfully. False otherwise.
            Passes out the top left and bottom right position of the rectangle area.
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.UpdateAreaRectangle">
            <summary>
            Update the virtual button rect in native
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.UpdateSensitivity">
            <summary>
            Update sensitivity in native
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.UpdateEnabled">
            <summary>
            Update enabled status in native
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.UpdatePose">
            <summary>
            UpdatePose() is called each frame to ensure the virtual button is clamped
            to the image target plane and remains axis-aligned with respect to the
            target. Return true if the defining area of the virtual button has
            changed, false otherwise.
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.OnTrackerUpdated(System.Boolean)">
            <summary>
            Called after the QCARBehaviour has updated.
            </summary>
        </member>
        <member name="M:Vuforia.VirtualButtonAbstractBehaviour.GetImageTargetBehaviour">
            <summary>
            Returns the Image Target that this Virtual Button is associated with.
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButtonAbstractBehaviour.VirtualButtonName">
            <summary>
            The names of this virtual button.
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButtonAbstractBehaviour.Pressed">
            <summary>
            Returns true if this button is currently pressed.
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButtonAbstractBehaviour.HasUpdatedPose">
            <summary>
            if the pose has been updated once
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButtonAbstractBehaviour.UnregisterOnDestroy">
            <summary>
            Unregistering Virtual Buttons should only be done if they have been 
            registered at runtime. This property is automatically set by
            ImageTargetBehaviour on registration.
            </summary>
        </member>
        <member name="P:Vuforia.VirtualButtonAbstractBehaviour.VirtualButton">
            <summary>
            The VirtualButton Object created at runtime
            </summary>
        </member>
        <member name="T:Vuforia.WebCamAbstractBehaviour">
            <summary>
            This MonoBehaviour manages the usage of a webcam for Play Mode in Windows or Mac.
            </summary>
        </member>
        <member name="F:Vuforia.WebCamAbstractBehaviour.RenderTextureLayer">
            <summary>
            The layer that will be used to render the background image
            </summary>
        </member>
        <member name="M:Vuforia.WebCamAbstractBehaviour.IsWebCamUsed">
            <summary>
            If the web cam is actually used.
            </summary>
        </member>
        <member name="M:Vuforia.WebCamAbstractBehaviour.InitCamera">
            <summary>
            Initialized the camera
            </summary>
        </member>
        <member name="M:Vuforia.WebCamAbstractBehaviour.CheckNativePluginSupport">
            <summary>
            Checks for native plugin support. Vuforia relies on native plugins, but they are not
            supported in the free Unity version on desktops.
            </summary>
        </member>
        <member name="M:Vuforia.WebCamAbstractBehaviour.OnLevelWasLoaded">
            <summary>
            In Unity 4, WebCamTexture is stopped when a new level is loaded.
            We manually restart the webcam again if it has been enabled before.
            </summary>
        </member>
        <member name="P:Vuforia.WebCamAbstractBehaviour.PlayModeRenderVideo">
            <summary>
            This property is used for configuring video background rendering in play mode.
            </summary>
        </member>
        <member name="P:Vuforia.WebCamAbstractBehaviour.DeviceName">
            <summary>
            The name of the web cam device that is used
            </summary>
        </member>
        <member name="P:Vuforia.WebCamAbstractBehaviour.FlipHorizontally">
            <summary>
            If the image from the webcam should be flipped horizontally.
            Some webcams will deliver a mirrored image, in that case 
            </summary>
        </member>
        <member name="P:Vuforia.WebCamAbstractBehaviour.TurnOffWebCam">
            <summary>
            The webcam can also be turned off if wanted.
            In this case, all Trackalbes will be considered tracked at their
            initial position.
            </summary>
        </member>
        <member name="P:Vuforia.WebCamAbstractBehaviour.IsPlaying">
            <summary>
            If the web cam is currently capturing video
            </summary>
        </member>
        <member name="P:Vuforia.WebCamAbstractBehaviour.ImplementationClass">
            <summary>
            Reference to the internal implementation class
            </summary>
        </member>
        <member name="T:Vuforia.WordAbstractBehaviour">
            <summary>
            This class serves both as an augmentation definition for a Word in the editor
            as well as a tracked Word result at runtime
            </summary>
        </member>
        <member name="M:Vuforia.WordAbstractBehaviour.InternalUnregisterTrackable">
            <summary>
            This method disconnects the TrackableBehaviour from its associated trackable.
            Use it only if you know what you are doing - e.g. when you want to destroy a trackable, but reuse the TrackableBehaviour.
            </summary>
        </member>
        <member name="P:Vuforia.WordAbstractBehaviour.Word">
            <summary>
            The word that this word behaviour augments
            </summary>
        </member>
        <member name="T:Vuforia.WordFilterMode">
            <summary>
            Types of filter modes
            </summary>
        </member>
        <member name="F:Vuforia.WordFilterMode.NONE">
            <summary>
            Word filtering is disabled
            </summary>
        </member>
        <member name="F:Vuforia.WordFilterMode.BLACK_LIST">
            <summary>
            Prevent specific words from being detected
            </summary>
        </member>
        <member name="F:Vuforia.WordFilterMode.WHITE_LIST">
            <summary>
            Enable selected words only to be detected
            </summary>
        </member>
    </members>
</doc>
